# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-1.0, 0.5), 
    point2=(1.0, -0.5))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0519046783447266, 0.989956736564636), value=6.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(2.5, 
    0.0), value=2.5, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(2.5, 
    -1.0))
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(-0.5, 
    0.25))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseSolidExtrude(depth=24.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName='Core')
mdb.models['Model-1'].parts['Core'].DatumPlaneByPrincipalPlane(offset=0.0625, 
    principalPlane=YZPLANE)
mdb.models['Model-1'].parts['Core'].DatumPlaneByPrincipalPlane(offset=-0.0625, 
    principalPlane=YZPLANE)
mdb.models['Model-1'].parts['Core'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['Core'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), datumPlane=mdb.models['Model-1'].parts['Core'].datums[2])
mdb.models['Model-1'].parts['Core'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['Core'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), datumPlane=mdb.models['Model-1'].parts['Core'].datums[3])
mdb.models['Model-1'].Material(name='EPS Foam')
mdb.models['Model-1'].materials['EPS Foam'].Elastic(table=((3500.0, 0.2), ))
mdb.models['Model-1'].Material(name='Balsa')
mdb.models['Model-1'].materials['Balsa'].Elastic(table=((1000000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='EPS Foam', name=
    'EPS Foam', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='Balsa', name='Balsa', 
    thickness=None)
mdb.models['Model-1'].parts['Core'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['Core'].cells.getSequenceFromMask(mask=(
    '[#6 ]', ), )), sectionName='EPS Foam', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Core'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['Core'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='Balsa', thicknessAssignment=FROM_SECTION)
# Save by mdulansk on 2023_07_10-11.04.49; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.04.50; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.04.50; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.04.51; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-1.75, 0.125), 
    point2=(2.625, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.142214298248291, 0.392601490020752), value=6.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    2.88287210464478, 0.0750836730003357), value=0.016, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(
    0.37475373595953, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='TopLam', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['TopLam'].BaseShellExtrude(depth=24.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-1.625, 0.25), 
    point2=(2.5, 0.125))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.292795181274414, 0.618138551712036), value=6.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    2.64302110671997, 0.182279944419861), value=0.016, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].move(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5]), vector=(0.5, 
    -0.125))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    3.0305507183075, 0.00932937115430832), value=0.008, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].dimensions[1], ))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='BotLam', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['BotLam'].BaseShellExtrude(depth=24.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Fiberglass4oz')
mdb.models['Model-1'].materials['Fiberglass4oz'].Elastic(table=((7000000.0, 
    1000000.0, 0.25, 500000.0, 500000.0, 500000.0), ), type=LAMINA)
mdb.models['Model-1'].Material(name='Fiberglass6oz')
mdb.models['Model-1'].materials['Fiberglass6oz'].Elastic(table=((9000000.0, 
    1250000.0, 0.25, 750000.0, 750000.0, 750000.0), ), type=LAMINA)
mdb.models['Model-1'].parts['TopLam'].CompositeLayup(description='', 
    elementType=SHELL, name='TopLam', offsetType=MIDDLE_SURFACE, symmetric=
    False, thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].Section(
    integrationRule=SIMPSON, poissonDefinition=DEFAULT, preIntegrate=OFF, 
    temperature=GRADIENT, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].ReferenceOrientation(
    additionalRotationType=ROTATION_NONE, angle=0.0, axis=AXIS_3, fieldName='', 
    localCsys=None, orientationType=GLOBAL)
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].suppress()
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Fiberglass4oz', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    faces=mdb.models['Model-1'].parts['TopLam'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )), suppressed=False, thickness=0.08, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Fiberglass6oz', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-2', region=Region(
    faces=mdb.models['Model-1'].parts['TopLam'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )), suppressed=False, thickness=0.08, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam'].resume()
mdb.models['Model-1'].parts['BotLam'].CompositeLayup(description='', 
    elementType=SHELL, name='BotLam', offsetType=MIDDLE_SURFACE, symmetric=
    False, thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['BotLam'].compositeLayups['BotLam'].Section(
    integrationRule=SIMPSON, poissonDefinition=DEFAULT, preIntegrate=OFF, 
    temperature=GRADIENT, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['BotLam'].compositeLayups['BotLam'].ReferenceOrientation(
    additionalRotationType=ROTATION_NONE, angle=0.0, axis=AXIS_3, fieldName='', 
    localCsys=None, orientationType=GLOBAL)
mdb.models['Model-1'].parts['BotLam'].compositeLayups['BotLam'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Fiberglass4oz', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    faces=mdb.models['Model-1'].parts['BotLam'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )), suppressed=False, thickness=0.08, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-9.0, 0.0), point2=(
    9.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Arc3Points(point1=(-9.0, 0.0), 
    point2=(9.0, 0.0), point3=(0.0, -1.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='TopRig', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['TopRig'].BaseSolidExtrude(depth=6.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Elastic(table=((29000000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name='Steel', 
    thickness=None)
mdb.models['Model-1'].parts['TopRig'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Steel', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.0, 0.0), point2=(
    -1.0, -1.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.0, -1.5), point2=
    (1.0, -1.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.0, -1.5), point2=(
    1.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Arc3Points(point1=(-1.0, 0.0), 
    point2=(1.0, 0.0), point3=(0.0, 1.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='BottomSupport', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['BottomSupport'].BaseSolidExtrude(depth=6.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['BottomSupport'].DatumPlaneByPrincipalPlane(offset=
    0.0, principalPlane=YZPLANE)
mdb.models['Model-1'].parts['BottomSupport'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['Model-1'].parts['BottomSupport'].datums[2])
mdb.models['Model-1'].parts['BottomSupport'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )), sectionName='Steel', thicknessAssignment=
    FROM_SECTION)
# Save by mdulansk on 2023_07_10-11.16.28; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.16.30; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.23, name='__profile__', 
    sheetSize=49.47, transform=
    mdb.models['Model-1'].parts['BotLam'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['BotLam'].faces[3], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BotLam'].edges[11], 
    sketchOrientation=RIGHT, origin=(0.0, 0.008, 12.0)))
mdb.models['Model-1'].parts['BotLam'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-11.0, 3.0), point2=
    (-11.0, -3.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 3.0), point2=(
    11.0, -3.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].parts['BotLam'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['BotLam'].faces.getSequenceFromMask(('[#8 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['BotLam'].edges[11])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.23, name='__profile__', 
    sheetSize=49.47, transform=
    mdb.models['Model-1'].parts['TopLam'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['TopLam'].faces[3], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['TopLam'].edges[11], 
    sketchOrientation=RIGHT, origin=(-0.000246, 0.016, 12.0)))
mdb.models['Model-1'].parts['TopLam'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    2.99999973595953), point2=(0.0, -3.00000026403521))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].parts['TopLam'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['TopLam'].faces.getSequenceFromMask(('[#8 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['TopLam'].edges[11])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='TopLam-1', 
    part=mdb.models['Model-1'].parts['TopLam'])
del mdb.models['Model-1'].rootAssembly.features['TopLam-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Core-1', part=
    mdb.models['Model-1'].parts['Core'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='TopLam-1', 
    part=mdb.models['Model-1'].parts['TopLam'])
mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].translate(vector=(
    6.60024626404047, 0.0, 0.0))
# Save by mdulansk on 2023_07_10-11.20.33; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[13], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces[2])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[10], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces[3])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='BotLam-1', 
    part=mdb.models['Model-1'].parts['BotLam'])
mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].translate(vector=(6.6, 
    0.0, 0.0))
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces[5], flip=OFF
    , movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[7])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[10], flip=ON, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces[4])
#* FeatureError: This constraint will create a dependency cycle.
#* Please reselect the entities to define the constraint.
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BotLam-1', ), 
    vector=(-6.6, 0.0, 0.0))
# Save by mdulansk on 2023_07_10-11.23.51; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='TopRig-1', 
    part=mdb.models['Model-1'].parts['TopRig'])
mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].translate(vector=(
    13.8, 0.0, 0.0))
mdb.models['Model-1'].parts['TopRig'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=YZPLANE)
mdb.models['Model-1'].parts['TopRig'].PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), datumPlane=mdb.models['Model-1'].parts['TopRig'].datums[3])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[10], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces[7])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].edges[0], flip=OFF
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].edges[1])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-1', part=mdb.models['Model-1'].parts['BottomSupport'])
mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].translate(
    vector=(4.50000000000276, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-2', part=mdb.models['Model-1'].parts['BottomSupport'])
mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].translate(
    vector=(7.1250000000029, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].edges[4], flip=OFF
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].edges[3])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].edges[3], 
    flip=OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].edges[0])
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-3']
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].edges[0], flip=OFF
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].edges[3])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('BottomSupport-1', )
    , vector=(2.625, -2.5, -21.0))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.23, name='__profile__', 
    sheetSize=49.47, transform=
    mdb.models['Model-1'].parts['BotLam'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['BotLam'].faces[3], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['BotLam'].edges[14], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 12.0)))
mdb.models['Model-1'].parts['BotLam'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-11.0, 3.0), point2=
    (-11.0, -3.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(11.0, 3.0), point2=(
    11.0, -3.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].parts['BotLam'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['BotLam'].faces.getSequenceFromMask(('[#8 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['BotLam'].edges[14])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Edge to Edge-2', 
    'Edge to Edge-3'))
# Save by mdulansk on 2023_07_10-11.28.57; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].edges[4], flip=OFF
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].edges[3])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].edges[0], flip=OFF
    , movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].edges[3])
# Save by mdulansk on 2023_07_10-11.29.41; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[10], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces[9])
mdb.models['Model-1'].rootAssembly.FaceToFace(clearance=0.0, fixedPlane=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces[10], flip=OFF, 
    movablePlane=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces[1])
# Save by mdulansk on 2023_07_10-11.30.24; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.30.24; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.30.25; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.30.25; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.30.25; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(initialInc=0.1, maxInc=1.0, minInc=0.0005, 
    name='Step-1', nlgeom=ON, previous='Initial', timePeriod=50.0)
# Save by mdulansk on 2023_07_10-11.30.46; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.34.26; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    formulation=FRICTIONLESS)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-2-TopLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-3-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-3-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-TopLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-Core-1'], name=
    'CP-1-Core-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-Core-1'], name=
    'CP-2-Core-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-2-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-3-Core-1'], name=
    'CP-3-Core-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-3-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-Core-1'], name=
    'CP-4-Core-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-Core-1'], name=
    'CP-5-Core-1-TopRig-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-TopRig-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-Core-1'], name=
    'CP-6-Core-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-Core-1'], name=
    'CP-7-Core-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-TopLam-1'], name=
    'CP-8-TopLam-1-TopRig-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-TopRig-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-TopLam-1'], name=
    'CP-9-TopLam-1-TopRig-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-TopRig-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-BotLam-1'], name=
    'CP-10-BotLam-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-BotLam-1'], name=
    'CP-11-BotLam-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-BotLam-1'], name=
    'CP-12-BotLam-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-BotLam-1'], name=
    'CP-13-BotLam-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=300.0, name='Load-1', region=
    Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    mask=('[#24 ]', ), )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    mask=('[#44 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    mask=('[#44 ]', ), )), u1=0.0, u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].parts['BotLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.1)
mdb.models['Model-1'].parts['BotLam'].generateMesh()
mdb.models['Model-1'].parts['BotLam'].deleteMesh()
mdb.models['Model-1'].parts['BotLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['BotLam'].generateMesh()
# Save by mdulansk on 2023_07_10-11.37.24; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['TopLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['TopLam'].generateMesh()
# Save by mdulansk on 2023_07_10-11.37.33; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['BottomSupport'].setMeshControls(elemShape=WEDGE, 
    regions=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-1'].parts['BottomSupport'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.6)
mdb.models['Model-1'].parts['BottomSupport'].generateMesh()
mdb.models['Model-1'].parts['BottomSupport'].deleteMesh()
mdb.models['Model-1'].parts['BottomSupport'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.25)
mdb.models['Model-1'].parts['BottomSupport'].generateMesh()
mdb.models['Model-1'].parts['BottomSupport'].deleteMesh(regions=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-1'].parts['BottomSupport'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['BottomSupport'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['Model-1'].parts['BottomSupport'].generateMesh()
# Save by mdulansk on 2023_07_10-11.38.19; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Core'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.2)
mdb.models['Model-1'].parts['Core'].generateMesh()
mdb.models['Model-1'].parts['Core'].deleteMesh()
mdb.models['Model-1'].parts['Core'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['Core'].generateMesh()
# Save by mdulansk on 2023_07_10-11.38.56; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['TopRig'].setMeshControls(elemShape=TET, regions=
    mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=FREE)
mdb.models['Model-1'].parts['TopRig'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['Model-1'].parts['TopRig'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['TopRig'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by mdulansk on 2023_07_10-11.39.23; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.39.27; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE RATIO OF THE MAXIMUM INCREMENTAL ADJUSTMENT TO THE AVERAGE CHARACTERISTIC LENGTH IS 2.56840E-02 AT NODE 6288 INSTANCE BOTTOMSUPPORT-1 ON THE SURFACE PAIR (ASSEMBLY_CP-11-BOTTOMSUPPORT-1,ASSEMBLY_CP-11-BOTLAM-1). MAGNITUDES OF STRAIN-FREE NODAL POSITION ADJUSTMENTS CAN BE OBSERVED IN CONTOUR PLOTS AND SYMBOL PLOTS OF THE "STRAINFREE" OUTPUT VARIABLE AT TIME=0.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE RATIO OF THE MAXIMUM INCREMENTAL ADJUSTMENT TO THE AVERAGE CHARACTERISTIC LENGTH IS 2.56840E-02 AT NODE 6288 INSTANCE BOTTOMSUPPORT-2 ON THE SURFACE PAIR (ASSEMBLY_CP-13-BOTTOMSUPPORT-2,ASSEMBLY_CP-13-BOTLAM-1). MAGNITUDES OF STRAIN-FREE NODAL POSITION ADJUSTMENTS CAN BE OBSERVED IN CONTOUR PLOTS AND SYMBOL PLOTS OF THE "STRAINFREE" OUTPUT VARIABLE AT TIME=0.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1344 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '33 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The volume of 174 elements is zero, small, or negative. Check coordinates or node numbering, or modify the mesh seed. In the case of a tetrahedron this error may indicate that all nodes are located very nearly in a plane. The elements have been identified in element set ErrElemVolSmallNegZero.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork.odb', 'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork'})
mdb.models['Model-1'].CompositeShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, layup=(SectionLayer(thickness=0.08, 
    material='Fiberglass4oz'), SectionLayer(thickness=0.08, 
    material='Fiberglass6oz')), name='topLam', poissonDefinition=DEFAULT, 
    preIntegrate=OFF, symmetric=False, temperature=GRADIENT, thicknessModulus=
    None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].CompositeShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, layup=(SectionLayer(thickness=0.08, 
    material='Fiberglass4oz'), ), name='botLam', poissonDefinition=DEFAULT, 
    preIntegrate=OFF, symmetric=False, temperature=GRADIENT, thicknessModulus=
    None, thicknessType=UNIFORM, useDensity=OFF)
del mdb.models['Model-1'].parts['BotLam'].compositeLayups['BotLam']
del mdb.models['Model-1'].parts['TopLam'].compositeLayups['TopLam']
mdb.models['Model-1'].parts['TopLam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['TopLam'].faces.getSequenceFromMask(
    mask=('[#1f ]', ), )), sectionName='topLam', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['BotLam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Model-1'].parts['BotLam'].faces.getSequenceFromMask(
    mask=('[#ff ]', ), )), sectionName='botLam', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by mdulansk on 2023_07_10-11.51.38; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.51.39; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.51.39; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-11.51.39; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['NotGonnaWork']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='notGonnaWork2', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['notGonnaWork2'].submit(consistencyChecking=OFF)
mdb.jobs['notGonnaWork2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE RATIO OF THE MAXIMUM INCREMENTAL ADJUSTMENT TO THE AVERAGE CHARACTERISTIC LENGTH IS 2.56840E-02 AT NODE 6288 INSTANCE BOTTOMSUPPORT-1 ON THE SURFACE PAIR (ASSEMBLY_CP-11-BOTTOMSUPPORT-1,ASSEMBLY_CP-11-BOTLAM-1). MAGNITUDES OF STRAIN-FREE NODAL POSITION ADJUSTMENTS CAN BE OBSERVED IN CONTOUR PLOTS AND SYMBOL PLOTS OF THE "STRAINFREE" OUTPUT VARIABLE AT TIME=0.', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE RATIO OF THE MAXIMUM INCREMENTAL ADJUSTMENT TO THE AVERAGE CHARACTERISTIC LENGTH IS 2.56840E-02 AT NODE 6288 INSTANCE BOTTOMSUPPORT-2 ON THE SURFACE PAIR (ASSEMBLY_CP-13-BOTTOMSUPPORT-2,ASSEMBLY_CP-13-BOTLAM-1). MAGNITUDES OF STRAIN-FREE NODAL POSITION ADJUSTMENTS CAN BE OBSERVED IN CONTOUR PLOTS AND SYMBOL PLOTS OF THE "STRAINFREE" OUTPUT VARIABLE AT TIME=0.', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '33 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The volume of 174 elements is zero, small, or negative. Check coordinates or node numbering, or modify the mesh seed. In the case of a tetrahedron this error may indicate that all nodes are located very nearly in a plane. The elements have been identified in element set ErrElemVolSmallNegZero.', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\notGonnaWork2.odb', 'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  notGonnaWork2.dat file for possible error messages if the file exists.', 
    'jobName': 'notGonnaWork2'})
mdb.jobs['notGonnaWork2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  notGonnaWork2.dat file for possible error messages if the file exists.', 
    'jobName': 'notGonnaWork2'})
mdb.models['Model-1'].parts['BottomSupport'].deleteMesh(regions=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Model-1'].parts['BottomSupport'].setMeshControls(elemShape=WEDGE, 
    regions=
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['BottomSupport'].setElementType(elemTypes=(
    ElemType(elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['Model-1'].parts['BottomSupport'].generateMesh()
mdb.models['Model-1'].parts['TopRig'].deleteMesh(regions=
    mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['Model-1'].parts['TopRig'].setMeshControls(elemShape=WEDGE, regions=
    mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), technique=SWEEP)
mdb.models['Model-1'].parts['TopRig'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['TopRig'].cells.getSequenceFromMask((
    '[#3 ]', ), ), ))
mdb.models['Model-1'].parts['TopRig'].generateMesh()
# Save by mdulansk on 2023_07_10-11.56.19; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['notGonnaWork2']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork3', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork3'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork3.odb', 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 12968, 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'NotGonnaWork3', 'memory': 464.0})
mdb.jobs['NotGonnaWork3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(MINIMUM_MEMORY, {'minimum_memory': 86.0, 
    'phase': STANDARD_PHASE, 'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 30.1632E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.04670E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 9.99369E+12.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 104.447E+09  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 5.66242E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 24.4201E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 20.7327E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 17.5881E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 8.53437E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'NotGonnaWork3', 'severe': 12, 'iterations': 13, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 637.813E+09  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.44457E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 3.60007E+12.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 5.71917E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 8.92117E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.117 D.O.F. 1 ratio = 71.9546E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.11 D.O.F. 1 ratio = 78.3127E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 102.725E+09  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 101.776E+09  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.112 D.O.F. 1 ratio = 210.504E+09  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'NotGonnaWork3', 'severe': 13, 'iterations': 14, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 24.4916E+12 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 7.77452E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.59402E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 5.59363E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 4.75976E+12.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.00625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork3', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 111.482E+12  .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 9.88085E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64789E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 14.0761E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 6.76141E+12.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.0015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork3', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 12.1326E+12 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.2324E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64511E+09.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 17.8427E+09 .', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 7.68071E+12.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork3'})
mdb.jobs['NotGonnaWork3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork3'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=100.0)
del mdb.jobs['NotGonnaWork3']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork4', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
# Save by mdulansk on 2023_07_10-12.00.20; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['NotGonnaWork4'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork4.odb', 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 10336, 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'NotGonnaWork4', 'memory': 464.0})
mdb.jobs['NotGonnaWork4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(MINIMUM_MEMORY, {'minimum_memory': 86.0, 
    'phase': STANDARD_PHASE, 'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 276.695E+09  .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.27090E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 10.1282E+12 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 7.00846E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 10.8329E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 54.7476E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 952.002E+09  .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'NotGonnaWork4', 'severe': 10, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 8.91204E+12.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 6.60266E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.48036E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 4.08635E+12.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.16 D.O.F. 1 ratio = 16.4369E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.2 D.O.F. 1 ratio = 32.6041E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.11 D.O.F. 1 ratio = 224.535E+09  .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.23 D.O.F. 1 ratio = 15.2305E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'NotGonnaWork4', 'severe': 9, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 16.2085E+12 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 9.65634E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.59853E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 12.3146E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 4.43912E+12.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.00625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork4', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 71.0989E+12 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.1179E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64088E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 16.5810E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 5.86575E+12.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.0015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork4', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 15.7860E+12 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.2526E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64746E+09.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 17.9521E+09 .', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 7.88504E+12.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork4'})
mdb.jobs['NotGonnaWork4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork4'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.01, maxNumInc=
    1000)
del mdb.jobs['NotGonnaWork4']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork5', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork5'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork5.odb', 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 7860, 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'NotGonnaWork5', 'memory': 464.0})
mdb.jobs['NotGonnaWork5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(MINIMUM_MEMORY, {'minimum_memory': 86.0, 
    'phase': STANDARD_PHASE, 'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 118.514E+12  .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 9.13398E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.55725E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 9.25653E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 31.2715E+12 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'NotGonnaWork5', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 15.6284E+12 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.0200E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 6.29278E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 10.5304E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 10.5958E+12 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.0025, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 15.8991E+12 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.1989E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64543E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 17.3373E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 5.29451E+12.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.000625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'NotGonnaWork5', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPRIG-1.12 D.O.F. 1 ratio = 15.7860E+12 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node TOPLAM-1.24 D.O.F. 3 ratio = 10.2526E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 1 ratio = 8.64746E+09.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CORE-1.43 D.O.F. 3 ratio = 17.9521E+09 .', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node BOTLAM-1.131 D.O.F. 1 ratio = 7.88504E+12.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork5'})
mdb.jobs['NotGonnaWork5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork5'})
mdb.models['Model-1'].ContactProperty('IntProp-2')
mdb.models['Model-1'].interactionProperties['IntProp-2'].TangentialBehavior(
    formulation=ROUGH)
mdb.models['Model-1'].interactions['CP-1-Core-1-TopLam-1'].setValuesInStep(
    interactionProperty='IntProp-2', stepName='Step-1')
mdb.models['Model-1'].interactions.delete(('CP-1-Core-1-TopLam-1', 
    'CP-2-Core-1-TopLam-1', 'CP-3-Core-1-BotLam-1', 'CP-4-Core-1-BotLam-1', 
    'CP-5-Core-1-TopRig-1', 'CP-6-Core-1-BottomSupport-1', 
    'CP-7-Core-1-BottomSupport-2', 'CP-8-TopLam-1-TopRig-1', 
    'CP-9-TopLam-1-TopRig-1', 'CP-10-BotLam-1-BottomSupport-1', 
    'CP-11-BotLam-1-BottomSupport-1', 'CP-12-BotLam-1-BottomSupport-2', 
    'CP-13-BotLam-1-BottomSupport-2'))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-3-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-4-TopLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-9-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#400 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#1000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-5-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-6-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#400 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-7-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#1000 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-8-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-10-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-Core-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-11-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-12-TopLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#102 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-13-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-14-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-TopRig-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#88 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-15-TopLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['TopLam-1'].faces.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-16-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-17-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#408 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-18-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-BottomSupport-1', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    ('[#202 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-19-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-BotLam-1', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#23 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-20-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#8c ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-21-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#1b0 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-22-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#408 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-22-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-23-BottomSupport-2', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    ('[#202 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-23-BotLam-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['BotLam-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-3-TopLam-1'], name=
    'CP-1-TopLam-1-Core-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-Core-1'], sliding=FINITE, 
    surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-4-TopLam-1'], name=
    'CP-2-TopLam-1-Core-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-9-Core-1'], sliding=FINITE, 
    surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-Core-1'], name=
    'CP-3-Core-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-Core-1'], name=
    'CP-4-Core-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-5-BotLam-1'], name=
    'CP-5-BotLam-1-Core-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-Core-1'], sliding=FINITE
    , surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-6-BotLam-1'], name=
    'CP-6-BotLam-1-Core-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-Core-1'], sliding=FINITE
    , surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-Core-1'], name=
    'CP-7-Core-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-7-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-2', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-Core-1'], name=
    'CP-8-Core-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-8-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-10-TopRig-1'], name=
    'CP-9-TopRig-1-Core-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-Core-1'], sliding=FINITE
    , surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-Core-1'], name=
    'CP-10-Core-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-Core-1'], name=
    'CP-11-Core-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-11-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-TopRig-1'], name=
    'CP-12-TopRig-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-12-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-TopRig-1'], name=
    'CP-13-TopRig-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-13-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-TopRig-1'], name=
    'CP-14-TopRig-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-14-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-TopRig-1'], name=
    'CP-15-TopRig-1-TopLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-15-TopLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-BotLam-1'], name=
    'CP-16-BotLam-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-16-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-BotLam-1'], name=
    'CP-17-BotLam-1-BottomSupport-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-17-BottomSupport-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-BottomSupport-1'], name=
    'CP-18-BottomSupport-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-18-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-BottomSupport-1'], name=
    'CP-19-BottomSupport-1-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-19-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-BotLam-1'], name=
    'CP-20-BotLam-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-20-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-BotLam-1'], name=
    'CP-21-BotLam-1-BottomSupport-2', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-21-BottomSupport-2'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-22-BottomSupport-2'], name=
    'CP-22-BottomSupport-2-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-22-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=OVERCLOSED, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-23-BottomSupport-2'], name=
    'CP-23-BottomSupport-2-BotLam-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-23-BotLam-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
del mdb.jobs['NotGonnaWork5']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork6', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork6'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-13-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-13-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-13-TOPLAM-1 AND ASSEMBLY_CP-14-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-13-TOPRIG-1 AND ASSEMBLY_CP-14-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-14-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-14-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-5-TOPLAM-1-ASSEMBLY_CP-10-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-6-TOPLAM-1-ASSEMBLY_CP-11-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-CORE-1-ASSEMBLY_CP-6-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-7-BOTLAM-1-ASSEMBLY_CP-14-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-8-BOTLAM-1-ASSEMBLY_CP-15-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-TOPLAM-1-ASSEMBLY_CP-13-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-15-TOPLAM-1-ASSEMBLY_CP-15-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-17-BOTTOMSUPPORT-1-ASSEMBLY_CP-17-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-18-BOTLAM-1-ASSEMBLY_CP-18-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-19-BOTLAM-1-ASSEMBLY_CP-19-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-21-BOTTOMSUPPORT-2-ASSEMBLY_CP-21-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-22-BOTLAM-1-ASSEMBLY_CP-22-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-23-BOTLAM-1-ASSEMBLY_CP-23-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '686 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Normal cannot be computed in 12 elements. The nodal coordinates may be incorrect or the element aspect ratio may exceed 1000 to 1. The elements have been identified in element set ErrElemNormal.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 16 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error in defining normal to the element surface at a node in 12 elements. The elements have been identified in element set ErrElemShellNormal.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork6.odb', 'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork6.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork6'})
mdb.jobs['NotGonnaWork6']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork6.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork6'})
# Save by mdulansk on 2023_07_10-12.18.30; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-12.18.39; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].interactionProperties['IntProp-2'].tangentialBehavior.setValues(
    formulation=ROUGH)
mdb.models['Model-1'].interactionProperties['IntProp-2'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
del mdb.jobs['NotGonnaWork6']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork7', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork7'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork7']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-13-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-13-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-13-TOPLAM-1 AND ASSEMBLY_CP-14-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-13-TOPRIG-1 AND ASSEMBLY_CP-14-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-14-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-14-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-5-TOPLAM-1-ASSEMBLY_CP-10-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-6-TOPLAM-1-ASSEMBLY_CP-11-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-CORE-1-ASSEMBLY_CP-6-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-7-BOTLAM-1-ASSEMBLY_CP-14-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-8-BOTLAM-1-ASSEMBLY_CP-15-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-TOPLAM-1-ASSEMBLY_CP-13-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-15-TOPLAM-1-ASSEMBLY_CP-15-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-17-BOTTOMSUPPORT-1-ASSEMBLY_CP-17-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-18-BOTLAM-1-ASSEMBLY_CP-18-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-19-BOTLAM-1-ASSEMBLY_CP-19-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-21-BOTTOMSUPPORT-2-ASSEMBLY_CP-21-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-22-BOTLAM-1-ASSEMBLY_CP-22-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-23-BOTLAM-1-ASSEMBLY_CP-23-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '686 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Normal cannot be computed in 12 elements. The nodal coordinates may be incorrect or the element aspect ratio may exceed 1000 to 1. The elements have been identified in element set ErrElemNormal.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 16 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error in defining normal to the element surface at a node in 12 elements. The elements have been identified in element set ErrElemShellNormal.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork7.odb', 'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork7.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork7'})
mdb.jobs['NotGonnaWork7']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork7.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork7'})
del mdb.jobs['NotGonnaWork7']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='NotGonnaWork', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['NotGonnaWork'].submit(consistencyChecking=OFF)
mdb.jobs['NotGonnaWork']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '*FRICTION,LAGRANGE OR *FRICTION,ROUGH MAY CAUSE CONVERGENCE DIFFICULTY WHEN USED IN CONJUNCTION WITH THE *SURFACE BEHAVIOR, AUGMENTED LAGRANGE OR PENALTY OPTION. USE PENALTY FRICTION INSTEAD.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-13-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-13-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-12-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-12-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-13-TOPLAM-1 AND ASSEMBLY_CP-14-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-13-TOPRIG-1 AND ASSEMBLY_CP-14-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACES ASSEMBLY_CP-14-TOPLAM-1 AND ASSEMBLY_CP-15-TOPLAM-1 INTERSECT EACH OTHER. THEY ARE PAIRED WITH MAIN SURFACES ASSEMBLY_CP-14-TOPRIG-1 AND ASSEMBLY_CP-15-TOPRIG-1 THAT ALSO INTERSECT EACH OTHER. IF BOTH PAIRS ARE *CONTACT PAIRs, THESE TWO PAIRS SHOULD NOT BE SIMULTANEOUSLY PRESENT IN A STEP BECAUSE OF POSSIBLE CONVERGENCE PROBLEMS; USE *MODEL CHANGE,TYPE=CONTACT PAIR TO REMOVE ONE OF THEM. IF BOTH ARE *TIE PAIRS, THE REDUNDANT TIES WILL BE REMOVED AUTOMATICALLY. IF ONE PAIR IS *TIE AND ANOTHER IS *CONTACT PAIR, REMOVE ONE OF THEM.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-5-TOPLAM-1-ASSEMBLY_CP-10-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-6-TOPLAM-1-ASSEMBLY_CP-11-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-CORE-1-ASSEMBLY_CP-6-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-7-BOTLAM-1-ASSEMBLY_CP-14-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-8-BOTLAM-1-ASSEMBLY_CP-15-CORE-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-13-TOPLAM-1-ASSEMBLY_CP-13-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-15-TOPLAM-1-ASSEMBLY_CP-15-TOPRIG-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-17-BOTTOMSUPPORT-1-ASSEMBLY_CP-17-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-18-BOTLAM-1-ASSEMBLY_CP-18-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-19-BOTLAM-1-ASSEMBLY_CP-19-BOTTOMSUPPORT-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-21-BOTTOMSUPPORT-2-ASSEMBLY_CP-21-BOTLAM-1), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-22-BOTLAM-1-ASSEMBLY_CP-22-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR CONTACT PAIR (ASSEMBLY_CP-23-BOTLAM-1-ASSEMBLY_CP-23-BOTTOMSUPPORT-2), ADJUSTMENT WAS SPECIFIED BUT NO NODE WAS ADJUSTED MORE THAN THE ADJUSTMENT DISTANCE = 2.22000E-16.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '686 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Normal cannot be computed in 12 elements. The nodal coordinates may be incorrect or the element aspect ratio may exceed 1000 to 1. The elements have been identified in element set ErrElemNormal.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 16 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error in defining normal to the element surface at a node in 12 elements. The elements have been identified in element set ErrElemShellNormal.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\NotGonnaWork.odb', 'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork'})
mdb.jobs['NotGonnaWork']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  NotGonnaWork.dat file for possible error messages if the file exists.', 
    'jobName': 'NotGonnaWork'})
mdb.models['Model-1'].parts['BottomSupport'].setValues(space=THREE_D, type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Model-1'].parts['TopRig'].setValues(space=THREE_D, type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['BottomSupport'].setValues(space=THREE_D, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['TopRig'].setValues(space=THREE_D, type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models.changeKey(fromName='Model-1', toName='Attemp1')
mdb.Model(name='Attempt2', objectToCopy=mdb.models['Attemp1'])
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-3', part=mdb.models['Attempt2'].parts['BottomSupport'])
mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-3'].translate(
    vector=(4.2, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-4', part=mdb.models['Attempt2'].parts['BottomSupport'])
mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-4'].translate(
    vector=(6.4, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Attempt2'].rootAssembly.instances['BotLam-1'].edges[4], flip=
    OFF, movableAxis=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-4'].edges[3])
mdb.models['Attempt2'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Attempt2'].rootAssembly.instances['BotLam-1'].edges[0], flip=
    OFF, movableAxis=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-3'].edges[3])
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('BottomSupport-4', 
    ), vector=(-6.4, 0.0, 0.5))
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('BottomSupport-3', 
    ), vector=(-4.2, 0.0, 0.0))
# Save by mdulansk on 2023_07_10-13.37.06; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name='TopRig-2', 
    part=mdb.models['Attempt2'].parts['TopRig'])
mdb.models['Attempt2'].rootAssembly.instances['TopRig-2'].translate(vector=(
    14.1000000011176, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Attempt2'].rootAssembly.instances['TopLam-1'].edges[0], flip=
    OFF, movableAxis=
    mdb.models['Attempt2'].rootAssembly.instances['TopRig-2'].edges[1])
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('TopRig-2', ), 
    vector=(-14.1, 0.0, 0.0))
# Save by mdulansk on 2023_07_10-13.38.02; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].steps['Step-1'].setValues(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, initialInc=0.1, maxNumInc=1000000, minInc=
    1e-20, stabilizationMagnitude=0.0002, stabilizationMethod=
    DISSIPATED_ENERGY_FRACTION, timePeriod=1.0)
del mdb.jobs['NotGonnaWork']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
del mdb.models['Attempt2'].parts['TopLam']
del mdb.models['Attempt2'].parts['BotLam']
mdb.models['Attempt2'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Attempt2'].sketches['__profile__'].rectangle(point1=(-40.0, 5.0), 
    point2=(27.5, 3.75))
mdb.models['Attempt2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -17.4186058044434, 11.0954704284668), value=6.0, vertex1=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[0])
del mdb.models['Attempt2'].sketches['__profile__']
mdb.models['Attempt2'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Attempt2'].sketches['__profile__'].rectangle(point1=(-2.375, 0.5), 
    point2=(1.875, 0.375))
mdb.models['Attempt2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -1.14979982376099, 0.852509260177612), value=6.0, vertex1=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[0])
mdb.models['Attempt2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    2.04135513305664, 0.434616386890411), value=0.016, vertex1=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[3])
mdb.models['Attempt2'].Part(dimensionality=THREE_D, name='Part-4', type=
    DEFORMABLE_BODY)
mdb.models['Attempt2'].parts['Part-4'].BaseSolidExtrude(depth=24.0, sketch=
    mdb.models['Attempt2'].sketches['__profile__'])
del mdb.models['Attempt2'].sketches['__profile__']
mdb.models['Attempt2'].parts.changeKey(fromName='Part-4', toName='topLam')
mdb.models['Attempt2'].ConstrainedSketch(name='__profile__', sheetSize=20.0)
mdb.models['Attempt2'].sketches['__profile__'].rectangle(point1=(-2.0, 0.5), 
    point2=(1.75, 0.375))
mdb.models['Attempt2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -0.626383781433105, 0.79253363609314), value=6.0, vertex1=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[0])
mdb.models['Attempt2'].sketches['__profile__'].ObliqueDimension(textPoint=(
    1.90100491046906, 0.437133699655533), value=0.008, vertex1=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Attempt2'].sketches['__profile__'].vertices[3])
mdb.models['Attempt2'].Part(dimensionality=THREE_D, name='botLam', type=
    DEFORMABLE_BODY)
mdb.models['Attempt2'].parts['botLam'].BaseSolidExtrude(depth=24.0, sketch=
    mdb.models['Attempt2'].sketches['__profile__'])
del mdb.models['Attempt2'].sketches['__profile__']
mdb.models['Attempt2'].rootAssembly.suppressFeatures(featureNames=('TopLam-1', 
    'BotLam-1'))
#* FeatureError: Regeneration failed
mdb.models['Attempt2'].rootAssembly.deleteFeatures(('Core-1', 'TopLam-1', 
    'BotLam-1', 'TopRig-1', 'BottomSupport-1', 'BottomSupport-2', 
    'BottomSupport-3', 'BottomSupport-4', 'TopRig-2', 'Face to Face-5', 
    'Face to Face-6', 'Face to Face-4', 'Face to Face-4', 'Face to Face-5', 
    'Face to Face-6'))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name='Core-1', part=
    mdb.models['Attempt2'].parts['Core'])
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name='topLam-1', 
    part=mdb.models['Attempt2'].parts['topLam'])
mdb.models['Attempt2'].rootAssembly.instances['topLam-1'].translate(vector=(
    7.725, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('topLam-1', ), 
    vector=(-6.6, 0.875, 0.0))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name='botLam-1', 
    part=mdb.models['Attempt2'].parts['botLam'])
mdb.models['Attempt2'].rootAssembly.instances['botLam-1'].translate(vector=(
    7.85, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('botLam-1', ), 
    vector=(-6.6, -1.633, 0.0))
# Save by mdulansk on 2023_07_10-13.54.36; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].parts['topLam'].OffsetFaces(distance=0.008, faceList=
    mdb.models['Attempt2'].parts['topLam'].faces.getSequenceFromMask(mask=(
    '[#8 ]', ), ), trimToReferenceRep=False)
mdb.models['Attempt2'].parts['topLam'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=
    mdb.models['Attempt2'].parts['topLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['topLam'].edges[19], MIDDLE), point1=
    mdb.models['Attempt2'].parts['topLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['topLam'].edges[11], MIDDLE), point2=
    mdb.models['Attempt2'].parts['topLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['topLam'].edges[2], MIDDLE))
mdb.models['Attempt2'].HomogeneousSolidSection(material='Fiberglass6oz', name=
    'Fiberglass60z', thickness=None)
mdb.models['Attempt2'].HomogeneousSolidSection(material='Fiberglass4oz', name=
    'fiberglass4oz', thickness=None)
mdb.models['Attempt2'].parts['topLam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Attempt2'].parts['topLam'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), sectionName='Fiberglass60z', thicknessAssignment=
    FROM_SECTION)
mdb.models['Attempt2'].parts['topLam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Attempt2'].parts['topLam'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='fiberglass4oz', thicknessAssignment=
    FROM_SECTION)
mdb.models['Attempt2'].parts['topLam'].MaterialOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_1, fieldName='', localCsys=
    mdb.models['Attempt2'].parts['topLam'].datums[3], orientationType=SYSTEM, 
    region=Region(
    cells=mdb.models['Attempt2'].parts['topLam'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), )), stackDirection=STACK_3)
mdb.models['Attempt2'].parts['topLam'].MaterialOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_1, fieldName='', localCsys=
    mdb.models['Attempt2'].parts['topLam'].datums[3], orientationType=SYSTEM, 
    region=Region(
    cells=mdb.models['Attempt2'].parts['topLam'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Attempt2'].parts['botLam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Attempt2'].parts['botLam'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='fiberglass4oz', thicknessAssignment=
    FROM_SECTION)
mdb.models['Attempt2'].rootAssembly.regenerate()
del mdb.models['Attempt2'].parts['TopRig'].sectionAssignments[0]
mdb.models['Attempt2'].parts['TopRig'].setValues(space=THREE_D, type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Attempt2'].parts['TopRig'].RemoveCells(cellList=
    mdb.models['Attempt2'].parts['TopRig'].cells.getSequenceFromMask(mask=(
    '[#3 ]', ), ))
mdb.models['Attempt2'].parts['TopRig'].ReferencePoint(point=
    mdb.models['Attempt2'].parts['TopRig'].InterestingPoint(
    mdb.models['Attempt2'].parts['TopRig'].edges[0], MIDDLE))
# Save by mdulansk on 2023_07_10-14.06.54; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name='TopRig-1', 
    part=mdb.models['Attempt2'].parts['TopRig'])
mdb.models['Attempt2'].rootAssembly.instances['TopRig-1'].translate(vector=(
    13.8, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces[10], flip=OFF
    , movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['TopRig-1'].faces[7])
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('TopRig-1', ), 
    vector=(-7.419444, 2.266, 9.380556))
mdb.models['Attempt2'].rootAssembly.deleteFeatures(('Face to Face-1', 
    'Face to Face-2', 'Face to Face-3', 'Edge to Edge-1', 'Edge to Edge-2', 
    'Edge to Edge-3', 'Edge to Edge-4', 'Edge to Edge-5', 'Edge to Edge-6'))
mdb.models['Attempt2'].rootAssembly.deleteSurfaces(surfaceNames=('CP-1-Core-1', 
    'CP-1-TopLam-1', 'CP-2-Core-1', 'CP-2-TopLam-1', 'CP-3-BotLam-1', 
    'CP-3-Core-1', 'CP-3-TopLam-1', 'CP-4-BotLam-1', 'CP-4-Core-1', 
    'CP-4-TopLam-1', 'CP-5-BotLam-1', 'CP-5-Core-1', 'CP-5-TopLam-1', 
    'CP-5-TopRig-1', 'CP-6-BotLam-1', 'CP-6-BottomSupport-1', 'CP-6-Core-1', 
    'CP-6-TopLam-1', 'CP-7-BotLam-1', 'CP-7-BottomSupport-2', 'CP-7-Core-1', 
    'CP-8-BotLam-1', 'CP-8-Core-1', 'CP-8-TopLam-1', 'CP-8-TopRig-1', 
    'CP-9-Core-1', 'CP-9-TopLam-1', 'CP-9-TopRig-1', 'CP-10-BotLam-1', 
    'CP-10-BottomSupport-1'))
mdb.models['Attempt2'].rootAssembly.deleteSurfaces(surfaceNames=(
    'CP-10-Core-1', 'CP-10-TopRig-1', 'CP-11-BotLam-1', 
    'CP-11-BottomSupport-1', 'CP-11-BottomSupport-2', 'CP-11-Core-1', 
    'CP-12-BotLam-1', 'CP-12-BottomSupport-1', 'CP-12-BottomSupport-2', 
    'CP-12-Core-1', 'CP-12-TopLam-1', 'CP-12-TopRig-1', 'CP-13-BotLam-1', 
    'CP-13-BottomSupport-2', 'CP-13-Core-1', 'CP-13-TopLam-1', 
    'CP-13-TopRig-1', 'CP-14-Core-1', 'CP-14-TopLam-1', 'CP-14-TopRig-1', 
    'CP-15-Core-1', 'CP-15-TopLam-1', 'CP-15-TopRig-1', 'CP-16-BotLam-1', 
    'CP-16-BottomSupport-1', 'CP-16-Core-1', 'CP-17-BotLam-1', 
    'CP-17-BottomSupport-1', 'CP-17-Core-1', 'CP-18-BotLam-1'))
mdb.models['Attempt2'].rootAssembly.deleteSurfaces(surfaceNames=(
    'CP-18-BottomSupport-1', 'CP-18-Core-1', 'CP-19-BotLam-1', 
    'CP-19-BottomSupport-1', 'CP-20-BotLam-1', 'CP-20-BottomSupport-2', 
    'CP-21-BotLam-1', 'CP-21-BottomSupport-2', 'CP-22-BotLam-1', 
    'CP-22-BottomSupport-2', 'CP-23-BotLam-1', 'CP-23-BottomSupport-2'))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-1', part=mdb.models['Attempt2'].parts['BottomSupport'])
mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].translate(
    vector=(4.50000002484998, 0.0, 0.0))
del mdb.models['Attempt2'].rootAssembly.features['BottomSupport-1']
mdb.models['Attempt2'].parts['BottomSupport'].RemoveCells(cellList=
    mdb.models['Attempt2'].parts['BottomSupport'].cells.getSequenceFromMask((
    '[#3 ]', ), ))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-1', part=mdb.models['Attempt2'].parts['BottomSupport'])
mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].translate(
    vector=(4.50000002484998, 0.0, 0.0))
mdb.models['Attempt2'].rootAssembly.Instance(dependent=ON, name=
    'BottomSupport-2', part=mdb.models['Attempt2'].parts['BottomSupport'])
mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].translate(
    vector=(7.12500005094245, 0.0, 0.0))
# Save by mdulansk on 2023_07_10-14.11.57; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].faces[9], 
    flip=OFF, movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].faces[9])
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces[10], flip=OFF
    , movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].faces[1])
mdb.models['Attempt2'].rootAssembly.deleteFeatures(('Parallel Face-3', 
    'Parallel Face-1', 'Parallel Face-2'))
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces[10], flip=OFF
    , movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['TopRig-1'].faces[7])
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces[10], flip=OFF
    , movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].faces[9])
mdb.models['Attempt2'].rootAssembly.ParallelFace(fixedPlane=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces[10], flip=OFF
    , movablePlane=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].faces[9])
mdb.models['Attempt2'].ConstrainedSketch(gridSpacing=1.23, name='__profile__', 
    sheetSize=49.48, transform=
    mdb.models['Attempt2'].parts['botLam'].MakeSketchTransform(
    sketchPlane=mdb.models['Attempt2'].parts['botLam'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Attempt2'].parts['botLam'].edges[6], 
    sketchOrientation=RIGHT, origin=(-1.25, 0.375, 12.0)))
mdb.models['Attempt2'].parts['botLam'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Attempt2'].sketches['__profile__'])
mdb.models['Attempt2'].sketches['__profile__'].Line(point1=(-11.0, 3.0), 
    point2=(-11.0, -3.0))
mdb.models['Attempt2'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Attempt2'].sketches['__profile__'].geometry[6])
mdb.models['Attempt2'].sketches['__profile__'].Line(point1=(11.0, 3.0), point2=
    (11.0, -3.0))
mdb.models['Attempt2'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Attempt2'].sketches['__profile__'].geometry[7])
mdb.models['Attempt2'].parts['botLam'].PartitionFaceBySketch(faces=
    mdb.models['Attempt2'].parts['botLam'].faces.getSequenceFromMask(('[#2 ]', 
    ), ), sketch=mdb.models['Attempt2'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Attempt2'].parts['botLam'].edges[6])
del mdb.models['Attempt2'].sketches['__profile__']
mdb.models['Attempt2'].rootAssembly.regenerate()
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('BottomSupport-2', 
    ), vector=(-4.599024, -2.258, 16.525976))
mdb.models['Attempt2'].rootAssembly.translate(instanceList=('BottomSupport-1', 
    ), vector=(-1.974024, -2.258, -5.474024))
# Save by mdulansk on 2023_07_10-14.14.36; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Attempt2'].steps['Step-1']
mdb.models['Attempt2'].StaticStep(initialInc=0.1, maxNumInc=1000000, minInc=
    1e-20, name='Step-1', nlgeom=ON, previous='Initial')
del mdb.models['Attempt2'].interactions['CP-1-TopLam-1-Core-1']
del mdb.models['Attempt2'].interactions['CP-2-TopLam-1-Core-1']
del mdb.models['Attempt2'].interactions['CP-3-Core-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-4-Core-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-5-BotLam-1-Core-1']
del mdb.models['Attempt2'].interactions['CP-6-BotLam-1-Core-1']
del mdb.models['Attempt2'].interactions['CP-7-Core-1-BotLam-1']
del mdb.models['Attempt2'].interactions['CP-8-Core-1-BotLam-1']
del mdb.models['Attempt2'].interactions['CP-9-TopRig-1-Core-1']
del mdb.models['Attempt2'].interactions['CP-10-Core-1-BottomSupport-1']
del mdb.models['Attempt2'].interactions['CP-11-Core-1-BottomSupport-2']
del mdb.models['Attempt2'].interactions['CP-12-TopRig-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-13-TopRig-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-14-TopRig-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-15-TopRig-1-TopLam-1']
del mdb.models['Attempt2'].interactions['CP-16-BotLam-1-BottomSupport-1']
del mdb.models['Attempt2'].interactions['CP-17-BotLam-1-BottomSupport-1']
del mdb.models['Attempt2'].interactions['CP-18-BottomSupport-1-BotLam-1']
del mdb.models['Attempt2'].interactions['CP-19-BottomSupport-1-BotLam-1']
del mdb.models['Attempt2'].interactions['CP-20-BotLam-1-BottomSupport-2']
del mdb.models['Attempt2'].interactions['CP-21-BotLam-1-BottomSupport-2']
del mdb.models['Attempt2'].interactions['CP-22-BottomSupport-2-BotLam-1']
del mdb.models['Attempt2'].interactions['CP-23-BottomSupport-2-BotLam-1']
mdb.models['Attempt2'].ContactProperty('IntProp-3')
mdb.models['Attempt2'].interactionProperties['IntProp-3'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Attempt2'].interactionProperties['IntProp-3'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.5, ), ), temperatureDependency=OFF)
del mdb.models['Attempt2'].interactionProperties['IntProp-1']
del mdb.models['Attempt2'].interactionProperties['IntProp-2']
del mdb.models['Attempt2'].interactionProperties['IntProp-3']
mdb.models['Attempt2'].ContactProperty('IntProp-1')
mdb.models['Attempt2'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Attempt2'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.5, ), ), temperatureDependency=OFF)
mdb.models['Attempt2'].rootAssembly.Surface(name='m_Surf-1', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['TopRig-1'].faces.getSequenceFromMask(
    ('[#50 ]', ), ))
mdb.models['Attempt2'].rootAssembly.Surface(name='s_Surf-1', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['topLam-1'].faces.getSequenceFromMask(
    ('[#100 ]', ), ))
mdb.models['Attempt2'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', main=
    mdb.models['Attempt2'].rootAssembly.surfaces['m_Surf-1'], name='Int-1', 
    secondary=mdb.models['Attempt2'].rootAssembly.surfaces['s_Surf-1'], 
    sliding=FINITE, thickness=ON)
mdb.models['Attempt2'].rootAssembly.Surface(name='m_Surf-3', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    mask=('[#110 ]', ), )+\
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    mask=('[#110 ]', ), ))
mdb.models['Attempt2'].rootAssembly.Surface(name='s_Surf-3', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['botLam-1'].faces.getSequenceFromMask(
    ('[#b ]', ), ))
mdb.models['Attempt2'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', main=
    mdb.models['Attempt2'].rootAssembly.surfaces['m_Surf-3'], name='Int-2', 
    secondary=mdb.models['Attempt2'].rootAssembly.surfaces['s_Surf-3'], 
    sliding=FINITE, thickness=ON)
mdb.models['Attempt2'].rootAssembly.Surface(name='m_Surf-5', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#2208 ]', ), ))
mdb.models['Attempt2'].rootAssembly.Surface(name='s_Surf-5', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['topLam-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Attempt2'].Tie(adjust=ON, main=
    mdb.models['Attempt2'].rootAssembly.surfaces['s_Surf-5'], name=
    'Constraint-1', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Attempt2'].rootAssembly.surfaces['m_Surf-5'], thickness=ON, 
    tieRotations=ON)
mdb.models['Attempt2'].rootAssembly.Surface(name='m_Surf-7', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    ('[#884 ]', ), ))
mdb.models['Attempt2'].rootAssembly.Surface(name='s_Surf-7', side1Faces=
    mdb.models['Attempt2'].rootAssembly.instances['botLam-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['Attempt2'].Tie(adjust=ON, main=
    mdb.models['Attempt2'].rootAssembly.surfaces['s_Surf-7'], name=
    'Constraint-2', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Attempt2'].rootAssembly.surfaces['m_Surf-7'], thickness=ON, 
    tieRotations=ON)
# Save by mdulansk on 2023_07_10-14.26.34; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.26.35; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.26.36; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.26.36; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.26.36; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].rootAssembly.Set(faces=
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].faces.getSequenceFromMask(
    mask=('[#202 ]', ), )+\
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].faces.getSequenceFromMask(
    mask=('[#202 ]', ), ), name='Set-1')
mdb.models['Attempt2'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-1', region=mdb.models['Attempt2'].rootAssembly.sets['Set-1'])
mdb.models['Attempt2'].rootAssembly.Set(name='Set-2', referencePoints=(
    mdb.models['Attempt2'].rootAssembly.instances['TopRig-1'].referencePoints[11], 
    ))
mdb.models['Attempt2'].DisplacementBC(amplitude=UNSET, createStepName='Initial'
    , distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Attempt2'].rootAssembly.sets['Set-2'], u1=SET, u2=UNSET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
mdb.models['Attempt2'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-1.0)
# Save by mdulansk on 2023_07_10-14.29.23; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].parts['TopRig'].generateMesh()
# Save by mdulansk on 2023_07_10-14.30.18; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].parts['BottomSupport'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Attempt2'].parts['BottomSupport'].generateMesh()
mdb.models['Attempt2'].parts['BottomSupport'].deleteMesh()
mdb.models['Attempt2'].parts['BottomSupport'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.25)
mdb.models['Attempt2'].parts['BottomSupport'].generateMesh()
mdb.models['Attempt2'].parts['botLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.2)
mdb.models['Attempt2'].parts['botLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Attempt2'].parts['botLam'].generateMesh()
mdb.models['Attempt2'].parts['topLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Attempt2'].parts['topLam'].generateMesh()
mdb.models['Attempt2'].parts['Core'].generateMesh()
mdb.models['Attempt2'].rootAssembly.regenerate()
# Save by mdulansk on 2023_07_10-14.32.22; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.32.37; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='ultimateTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['ultimateTest'].submit(consistencyChecking=OFF)
mdb.jobs['ultimateTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ELASTIC,TYPE=LAMINA CAN ONLY BE USED WITH PLANE STRESS ELEMENTS', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\ultimateTest.odb', 'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  ultimateTest.dat file for possible error messages if the file exists.', 
    'jobName': 'ultimateTest'})
mdb.jobs['ultimateTest']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  ultimateTest.dat file for possible error messages if the file exists.', 
    'jobName': 'ultimateTest'})
mdb.models['Attempt2'].materials['Fiberglass4oz'].elastic.setValues(table=((
    7000000.0, 1000000.0, 1000000.0, 0.25, 0.4, 0.4, 500000.0, 500000.0, 
    500000.0), ), type=ENGINEERING_CONSTANTS)
mdb.models['Attempt2'].materials['Fiberglass6oz'].elastic.setValues(table=((
    9000000.0, 1250000.0, 0.25, 0.25, 0.3, 0.4, 750000.0, 750000.0, 750000.0), 
    ), type=ENGINEERING_CONSTANTS)
mdb.models['Attempt2'].parts['botLam'].regenerate()
del mdb.jobs['ultimateTest']
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '2348 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Anisotropic material properties without a local orientation system have been defined for 576 elements. Anisotropic material properties must be defined in a local orientation system. The elements are identified in element set ErrElemAnisotropicMaterial.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Attempt2'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Steel', name='Steelshell', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.5, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Attempt2'].parts['BottomSupport'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['Attempt2'].parts['BottomSupport'].faces.getSequenceFromMask(
    mask=('[#7ff ]', ), )), sectionName='Steelshell', thicknessAssignment=
    FROM_SECTION)
del mdb.models['Attempt2'].parts['BottomSupport'].sectionAssignments[1]
del mdb.models['Attempt2'].parts['BottomSupport'].sectionAssignments[0]
# Save by mdulansk on 2023_07_10-14.41.46; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].parts['BottomSupport'].setValues(space=THREE_D, type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Attempt2'].rootAssembly.regenerate()
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.models['Attempt2'].steps['Step-1'].setValues(adaptiveDampingRatio=0.05, 
    continueDampingFactors=False, stabilizationMagnitude=0.0002, 
    stabilizationMethod=DISSIPATED_ENERGY_FRACTION)
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
del mdb.models['Attempt2'].boundaryConditions['BC-1']
mdb.models['Attempt2'].parts['BottomSupport'].ReferencePoint(point=
    mdb.models['Attempt2'].parts['BottomSupport'].vertices[0])
mdb.models['Attempt2'].rootAssembly.regenerate()
mdb.models['Attempt2'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='BC-3', region=Region(referencePoints=(
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-2'].referencePoints[16], 
    mdb.models['Attempt2'].rootAssembly.instances['BottomSupport-1'].referencePoints[16], 
    )))
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.models['Attempt2'].parts['BottomSupport'].generateMesh()
# Save by mdulansk on 2023_07_10-14.44.35; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Attempt2'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Anisotropic material properties without a local orientation system have been defined for 576 elements. Anisotropic material properties must be defined in a local orientation system. The elements are identified in element set ErrElemAnisotropicMaterial.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Attempt2'].parts['botLam'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=
    mdb.models['Attempt2'].parts['botLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['botLam'].edges[6], MIDDLE), point1=
    mdb.models['Attempt2'].parts['botLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['botLam'].edges[2], MIDDLE), point2=
    mdb.models['Attempt2'].parts['botLam'].InterestingPoint(
    mdb.models['Attempt2'].parts['botLam'].edges[17], MIDDLE))
mdb.models['Attempt2'].parts['botLam'].MaterialOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_1, fieldName='', localCsys=
    mdb.models['Attempt2'].parts['botLam'].datums[6], orientationType=SYSTEM, 
    region=Region(
    cells=mdb.models['Attempt2'].parts['botLam'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Attempt2'].rootAssembly.regenerate()
del mdb.jobs['Job-1']
# Save by mdulansk on 2023_07_10-14.46.29; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-38', 'handle': 8712, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 273.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0875, 'attempts': 1, 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.0875, 'step': 1, 
    'jobName': 'Job-1', 'severe': 3, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.14375, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 4, 'stepTime': 0.14375, 'step': 1, 
    'jobName': 'Job-1', 'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.228125, 'attempts': 1, 
    'timeIncrement': 0.084375, 'increment': 5, 'stepTime': 0.228125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.3546875, 'attempts': 1, 
    'timeIncrement': 0.1265625, 'increment': 6, 'stepTime': 0.3546875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 5, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.54453125, 'attempts': 1, 
    'timeIncrement': 0.18984375, 'increment': 7, 'stepTime': 0.54453125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 5, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.829296875, 'attempts': 1, 
    'timeIncrement': 0.284765625, 'increment': 8, 'stepTime': 0.829296875, 
    'step': 1, 'jobName': 'Job-1', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.170703125, 'increment': 9, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 10, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Mon Jul 10 14:48:09 2023', 
    'jobName': 'Job-1'})
# Save by mdulansk on 2023_07_10-14.48.15; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.49.21; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.05; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.06; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.06; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.06; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.06; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.51.07; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_10-14.52.37; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Attempt2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='UltimateTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['UltimateTest'].submit(consistencyChecking=OFF)
# Save by Matt on 2023_07_10-15.21.47; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['UltimateTest'].submit(consistencyChecking=OFF)
mdb.jobs['UltimateTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\UltimateTest.odb', 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 8920, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'UltimateTest', 'memory': 273.0})
mdb.jobs['UltimateTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.0875, 'attempts': 1, 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.0875, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.14375, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 4, 'stepTime': 0.14375, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.228125, 
    'attempts': 1, 'timeIncrement': 0.084375, 'increment': 5, 
    'stepTime': 0.228125, 'step': 1, 'jobName': 'UltimateTest', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.3546875, 
    'attempts': 1, 'timeIncrement': 0.1265625, 'increment': 6, 
    'stepTime': 0.3546875, 'step': 1, 'jobName': 'UltimateTest', 'severe': 5, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.54453125, 
    'attempts': 1, 'timeIncrement': 0.18984375, 'increment': 7, 
    'stepTime': 0.54453125, 'step': 1, 'jobName': 'UltimateTest', 'severe': 5, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 0.829296875, 
    'attempts': 1, 'timeIncrement': 0.284765625, 'increment': 8, 
    'stepTime': 0.829296875, 'step': 1, 'jobName': 'UltimateTest', 'severe': 7, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.170703125, 'increment': 9, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'UltimateTest', 'severe': 10, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['UltimateTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'UltimateTest'})
mdb.jobs['UltimateTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 13:29:48 2023', 'jobName': 'UltimateTest'})
mdb.models.changeKey(fromName='Attempt2', toName='BaseCoarseMesh')
del mdb.models['Attemp1']
mdb.Model(name='BaseFineMesh', objectToCopy=mdb.models['BaseCoarseMesh'])
mdb.models['BaseFineMesh'].parts['Core'].deleteMesh()
mdb.models['BaseFineMesh'].parts['Core'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.25)
mdb.models['BaseFineMesh'].parts['Core'].generateMesh()
# Save by mdulansk on 2023_07_11-13.32.36; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseFineMesh'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BaseFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BaseFineMesh', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BaseFineMesh'].submit(consistencyChecking=OFF)
mdb.jobs['BaseFineMesh']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMesh.odb', 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 4344, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BaseFineMesh', 'memory': 1245.0})
mdb.jobs['BaseFineMesh']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(MINIMUM_MEMORY, {'minimum_memory': 131.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 22 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 30 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'BaseFineMesh', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'BaseFineMesh', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'BaseFineMesh', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.0875, 'attempts': 1, 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.0875, 'step': 1, 
    'jobName': 'BaseFineMesh', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.14375, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 4, 'stepTime': 0.14375, 'step': 1, 
    'jobName': 'BaseFineMesh', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.228125, 
    'attempts': 1, 'timeIncrement': 0.084375, 'increment': 5, 
    'stepTime': 0.228125, 'step': 1, 'jobName': 'BaseFineMesh', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.3546875, 
    'attempts': 1, 'timeIncrement': 0.1265625, 'increment': 6, 
    'stepTime': 0.3546875, 'step': 1, 'jobName': 'BaseFineMesh', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.54453125, 
    'attempts': 1, 'timeIncrement': 0.18984375, 'increment': 7, 
    'stepTime': 0.54453125, 'step': 1, 'jobName': 'BaseFineMesh', 'severe': 4, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.829296875, 
    'attempts': 1, 'timeIncrement': 0.284765625, 'increment': 8, 
    'stepTime': 0.829296875, 'step': 1, 'jobName': 'BaseFineMesh', 'severe': 8, 
    'iterations': 15, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 24 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 382 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 579 negative eigenvalues.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node TOPLAM-1.866 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22199 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22199 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22199 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21344 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21344 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21344 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22202 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22202 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22202 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21347 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21347 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21347 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22201 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22201 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22201 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21346 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21346 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21346 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22200 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22200 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22200 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21345 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21345 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21345 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22217 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22217 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22217 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21362 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21362 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21362 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22208 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22208 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22208 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21353 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21353 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21353 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22220 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22220 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22220 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21365 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21365 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21365 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22219 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22219 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22219 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21364 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21364 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21364 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22211 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22211 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22211 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21354 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21354 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21354 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21355 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21355 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21355 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21356 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21356 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21356 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21363 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21363 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21363 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22209 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22209 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22209 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22210 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22210 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22210 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22218 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22218 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22218 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22253 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22253 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22253 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21398 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21398 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21398 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22256 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22256 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22256 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21401 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21401 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21401 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22255 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22255 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22255 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21400 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21400 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21400 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22254 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22254 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22254 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21399 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21399 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21399 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22235 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22235 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22235 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21380 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21380 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21380 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22244 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22244 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22244 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21389 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21389 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21389 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22238 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22238 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22238 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21383 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21383 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21383 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22237 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22237 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22237 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21382 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21382 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21382 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22247 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22247 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22247 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21381 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21381 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21381 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21390 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21390 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21390 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21391 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21391 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21391 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21392 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21392 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21392 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22236 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22236 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22236 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22245 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22245 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22245 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22246 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22246 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22246 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22229 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22229 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22229 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21371 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21371 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21371 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21372 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21372 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21372 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21373 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21373 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21373 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21374 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21374 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.21374 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22226 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22226 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22226 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22227 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22227 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22227 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22228 D.O.F. 1.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22228 D.O.F. 2.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.22228 D.O.F. 3.', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(STATUS, {'totalTime': 0.829296875, 
    'attempts': ' 1U', 'timeIncrement': 0.170703125, 'increment': 9, 
    'stepTime': 0.829296875, 'step': 1, 'jobName': 'BaseFineMesh', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['BaseFineMesh'].parts['topLam'].deleteMesh()
mdb.models['BaseFineMesh'].parts['topLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.25)
mdb.models['BaseFineMesh'].parts['topLam'].generateMesh()
# Save by mdulansk on 2023_07_11-13.40.16; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseFineMesh'].parts['botLam'].deleteMesh()
mdb.models['BaseFineMesh'].parts['botLam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.25)
mdb.models['BaseFineMesh'].parts['botLam'].generateMesh()
# Save by mdulansk on 2023_07_11-13.40.25; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseFineMesh'].rootAssembly.regenerate()
mdb.jobs['BaseFineMesh']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'BaseFineMesh'})
mdb.jobs['BaseFineMesh']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'BaseFineMesh'})
del mdb.jobs['BaseFineMesh']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BaseFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BaseFineMeshTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BaseFineMeshTest'].submit(consistencyChecking=OFF)
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 12260, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 98 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 76 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['BaseFineMesh'].materials['Fiberglass4oz'].elastic.setValues(table=(
    (7000000.0, 7000000.0, 1000000.0, 0.25, 0.4, 0.4, 500000.0, 500000.0, 
    500000.0), ))
mdb.models['BaseFineMesh'].materials['Fiberglass6oz'].elastic.setValues(table=(
    (9000000.0, 9000000.0, 1250000.0, 0.25, 0.3, 0.4, 750000.0, 750000.0, 
    750000.0), ))
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.025, 
    'attempts': 2, 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'BaseFineMeshTest'})
del mdb.jobs['BaseFineMeshTest']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BaseFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BaseFineMeshTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BaseFineMeshTest'].submit(consistencyChecking=OFF)
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 1940, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 1940, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 209 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 209 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 18 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 18 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.models['BaseFineMesh'].steps['Step-1'].setValues(maxInc=1.0, timePeriod=
    10.0)
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.025, 
    'attempts': 2, 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.025, 
    'attempts': 2, 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'BaseFineMeshTest'})
del mdb.jobs['BaseFineMeshTest']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BaseFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BaseFineMeshTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BaseFineMeshTest'].submit(consistencyChecking=OFF)
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BaseFineMeshTest.odb', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 10060, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 10060, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 10060, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest', 'memory': 2203.0})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BaseFineMeshTest'})
# Save by mdulansk on 2023_07_11-13.47.06; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BaseFineMeshTest', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 5, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'BaseFineMeshTest', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'BaseFineMeshTest', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'BaseFineMeshTest', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 3.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 8, 'stepTime': 3.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 3.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 8, 'stepTime': 3.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 3.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 8, 'stepTime': 3.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 4.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 9, 'stepTime': 4.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 4.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 9, 'stepTime': 4.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 4.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 9, 'stepTime': 4.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.Model(name='ForceVsDisplFineMesh', objectToCopy=mdb.models['BaseFineMesh'])
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 5.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 10, 'stepTime': 5.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 5.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 10, 'stepTime': 5.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(STATUS, {'totalTime': 5.178125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 10, 'stepTime': 5.178125, 
    'step': 1, 'jobName': 'BaseFineMeshTest', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
mdb.jobs['BaseFineMeshTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BaseFineMeshTest'})
# Save by mdulansk on 2023_07_11-14.02.32; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['ForceVsDisplFineMesh']
mdb.Model(name='CarbonHorizCoarse', objectToCopy=mdb.models['BaseCoarseMesh'])
del mdb.models['BaseCoarseMesh'].parts['Core'].sectionAssignments[1]
mdb.models['BaseCoarseMesh'].parts['Core'].deleteFeatures(('Partition cell-1', 
    'Partition cell-2'))
del mdb.models['BaseCoarseMesh'].parts['Core'].sectionAssignments[0]
mdb.models['BaseCoarseMesh'].parts['Core'].deleteFeatures(('Datum plane-1', 
    'Datum plane-2'))
mdb.models['BaseCoarseMesh'].parts['Core'].DatumPlaneByPrincipalPlane(offset=
    0.004, principalPlane=XZPLANE)
mdb.models['BaseCoarseMesh'].parts['Core'].DatumPlaneByPrincipalPlane(offset=
    -0.004, principalPlane=XZPLANE)
mdb.models['BaseCoarseMesh'].parts['Core'].PartitionCellByDatumPlane(cells=
    mdb.models['BaseCoarseMesh'].parts['Core'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['BaseCoarseMesh'].parts['Core'].datums[10])
mdb.models['BaseCoarseMesh'].parts['Core'].PartitionCellByDatumPlane(cells=
    mdb.models['BaseCoarseMesh'].parts['Core'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['BaseCoarseMesh'].parts['Core'].datums[11])
mdb.models['BaseCoarseMesh'].Material(name='Carbon3k')
mdb.models['BaseCoarseMesh'].materials['Carbon3k'].Elastic(table=((33359000.0, 
    33359000.0, 1000.0, 0.3, 0.3, 0.3, 1450400.0, 1000.0, 1000.0), ), type=
    ENGINEERING_CONSTANTS)
mdb.models['BaseCoarseMesh'].HomogeneousSolidSection(material='Carbon3k', name=
    'Carbon', thickness=None)
mdb.models['BaseCoarseMesh'].parts['Core'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['BaseCoarseMesh'].parts['Core'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Carbon', thicknessAssignment=
    FROM_SECTION)
mdb.models['BaseCoarseMesh'].parts['Core'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['BaseCoarseMesh'].parts['Core'].cells.getSequenceFromMask(
    mask=('[#6 ]', ), )), sectionName='EPS Foam', thicknessAssignment=
    FROM_SECTION)
# Save by mdulansk on 2023_07_11-14.17.05; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseCoarseMesh'].rootAssembly.regenerate()
mdb.models['BaseCoarseMesh'].constraints['Constraint-1'].setValues(main=Region(
    side1Faces=mdb.models['BaseCoarseMesh'].rootAssembly.instances['topLam-1'].faces.getSequenceFromMask(
    mask=('[#40 ]', ), )), secondary=Region(
    side1Faces=mdb.models['BaseCoarseMesh'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    mask=('[#2000 ]', ), )))
mdb.models['BaseCoarseMesh'].constraints['Constraint-2'].setValues(main=Region(
    side1Faces=mdb.models['BaseCoarseMesh'].rootAssembly.instances['botLam-1'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )), secondary=Region(
    side1Faces=mdb.models['BaseCoarseMesh'].rootAssembly.instances['Core-1'].faces.getSequenceFromMask(
    mask=('[#800 ]', ), )))
# Save by mdulansk on 2023_07_11-14.20.48; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_11-14.21.27; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseCoarseMesh'].boundaryConditions['BC-2'].setValuesInStep(
    stepName='Step-1', u2=-0.5)
# Save by mdulansk on 2023_07_11-14.21.56; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseCoarseMesh'].parts['Core'].generateMesh()
# Save by mdulansk on 2023_07_11-14.23.15; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseCoarseMesh'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BaseCoarseMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CarbonHorizCoarsTest', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['CarbonHorizCoarsTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Anisotropic material properties without a local orientation system have been defined for 576 elements. Anisotropic material properties must be defined in a local orientation system. The elements are identified in element set ErrElemAnisotropicMaterial.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonHorizCoarsTest.odb', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  CarbonHorizCoarsTest.dat file for possible error messages if the file exists.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  CarbonHorizCoarsTest.dat file for possible error messages if the file exists.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.models['BaseCoarseMesh'].parts['Core'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=
    mdb.models['BaseCoarseMesh'].parts['Core'].vertices[9], point1=
    mdb.models['BaseCoarseMesh'].parts['Core'].vertices[14], point2=
    mdb.models['BaseCoarseMesh'].parts['Core'].vertices[13])
mdb.models['BaseCoarseMesh'].parts['Core'].MaterialOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['BaseCoarseMesh'].parts['Core'].datums[16], orientationType=
    SYSTEM, region=Region(
    cells=mdb.models['BaseCoarseMesh'].parts['Core'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), stackDirection=STACK_3)
# Save by mdulansk on 2023_07_11-14.25.22; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BaseCoarseMesh'].rootAssembly.regenerate()
mdb.jobs['CarbonHorizCoarsTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonHorizCoarsTest.odb', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 11608, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'CarbonHorizCoarsTest', 
    'memory': 249.0})
mdb.jobs['CarbonHorizCoarsTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 39.0, 'phase': STANDARD_PHASE, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0874999999999999, 'increment': 6, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:26:19 2023', 'jobName': 'CarbonHorizCoarsTest'})
mdb.models['BaseCoarseMesh'].boundaryConditions['BC-2'].setValuesInStep(
    stepName='Step-1', u2=-1.0)
mdb.jobs['CarbonHorizCoarsTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonHorizCoarsTest.odb', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 1588, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'CarbonHorizCoarsTest', 
    'memory': 249.0})
mdb.jobs['CarbonHorizCoarsTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 39.0, 'phase': STANDARD_PHASE, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 26 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 64 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.025, 
    'attempts': 2, 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 5, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.025, 
    'attempts': ' 1U', 'timeIncrement': 0.025, 'increment': 2, 
    'stepTime': 0.025, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.03125, 
    'attempts': 2, 'timeIncrement': 0.00625, 'increment': 2, 
    'stepTime': 0.03125, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.040625, 
    'attempts': 1, 'timeIncrement': 0.009375, 'increment': 3, 
    'stepTime': 0.040625, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.0546875, 
    'attempts': 1, 'timeIncrement': 0.0140625, 'increment': 4, 
    'stepTime': 0.0546875, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.07578125, 
    'attempts': 1, 'timeIncrement': 0.02109375, 'increment': 5, 
    'stepTime': 0.07578125, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.107421875, 
    'attempts': 1, 'timeIncrement': 0.031640625, 'increment': 6, 
    'stepTime': 0.107421875, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.1548828125, 
    'attempts': 1, 'timeIncrement': 0.0474609375, 'increment': 7, 
    'stepTime': 0.1548828125, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.22607421875, 
    'attempts': 1, 'timeIncrement': 0.07119140625, 'increment': 8, 
    'stepTime': 0.22607421875, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.332861328125, 
    'attempts': 1, 'timeIncrement': 0.106787109375, 'increment': 9, 
    'stepTime': 0.332861328125, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.4930419921875, 'attempts': 1, 
    'timeIncrement': 0.1601806640625, 'increment': 10, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 72 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 203 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 109 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.4930419921875, 'attempts': ' 1U', 
    'timeIncrement': 0.24027099609375, 'increment': 11, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.553109741210937, 'attempts': 2, 
    'timeIncrement': 0.0600677490234375, 'increment': 11, 
    'stepTime': 0.553109741210937, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.643211364746094, 'attempts': 1, 
    'timeIncrement': 0.0901016235351563, 'increment': 12, 
    'stepTime': 0.643211364746094, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.778363800048828, 'attempts': 1, 
    'timeIncrement': 0.135152435302734, 'increment': 13, 
    'stepTime': 0.778363800048828, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 12, 'iterations': 14, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 147 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 272 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 169 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 404 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.778363800048828, 'attempts': ' 1U', 
    'timeIncrement': 0.202728652954102, 'increment': 14, 
    'stepTime': 0.778363800048828, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.778363800048828, 'attempts': ' 2U', 
    'timeIncrement': 0.0506821632385254, 'increment': 14, 
    'stepTime': 0.778363800048828, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.791034340858459, 'attempts': 3, 
    'timeIncrement': 0.0126705408096313, 'increment': 14, 
    'stepTime': 0.791034340858459, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.810040152072906, 'attempts': 1, 
    'timeIncrement': 0.019005811214447, 'increment': 15, 
    'stepTime': 0.810040152072906, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 176 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 54 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 28 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.810040152072906, 'attempts': ' 1U', 
    'timeIncrement': 0.0285087168216705, 'increment': 16, 
    'stepTime': 0.810040152072906, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.models['BaseCoarseMesh'].boundaryConditions['BC-2'].setValuesInStep(
    stepName='Step-1', u2=-0.5)
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {
    'totalTime': 0.817167331278324, 'attempts': 2, 
    'timeIncrement': 0.00712717920541763, 'increment': 16, 
    'stepTime': 0.817167331278324, 'step': 1, 
    'jobName': 'CarbonHorizCoarsTest', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
# Save by mdulansk on 2023_07_11-14.29.48; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonHorizCoarsTest.odb', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 14556, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'CarbonHorizCoarsTest', 
    'memory': 249.0})
mdb.jobs['CarbonHorizCoarsTest']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 32378.0, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 39.0, 'phase': STANDARD_PHASE, 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0874999999999999, 'increment': 6, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'CarbonHorizCoarsTest', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonHorizCoarsTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs['CarbonHorizCoarsTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:30:56 2023', 'jobName': 'CarbonHorizCoarsTest'})
mdb.jobs.changeKey(fromName='UltimateTest', toName='BalsaCoarse')
del mdb.jobs['BalsaCoarse']
del mdb.jobs['BaseFineMeshTest']
mdb.models.changeKey(fromName='BaseCoarseMesh', toName='BalsaCoarseMesh')
mdb.models.changeKey(fromName='BaseFineMesh', toName='BalsaFineMesh')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BalsaCoarseMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BalsaCoarseTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BalsaCoarseTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaCoarseTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaCoarseTest.odb', 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 17312, 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaCoarseTest', 'memory': 249.0})
mdb.jobs['BalsaCoarseTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 39.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BalsaCoarseTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BalsaCoarseTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'BalsaCoarseTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'BalsaCoarseTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'BalsaCoarseTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'BalsaCoarseTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaCoarseTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaCoarseTest'})
mdb.jobs['BalsaCoarseTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:35:15 2023', 'jobName': 'BalsaCoarseTest'})
mdb.models.changeKey(fromName='BalsaCoarseMesh', toName='Carbon')
mdb.models.changeKey(fromName='CarbonHorizCoarse', toName='Balsa')
del mdb.jobs['CarbonHorizCoarsTest']
del mdb.jobs['BalsaCoarseTest']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Balsa', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BalsaTest', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaTest.odb', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 16840, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaTest', 'memory': 273.0})
mdb.jobs['BalsaTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaTest'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Carbon', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='CarbonTest', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonTest.odb', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 14184, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'CarbonTest', 'memory': 249.0})
mdb.jobs['CarbonTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 39.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 1, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.05, 'attempts': 1, 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.05, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.0875, 'attempts': 1, 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.0875, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.14375, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 4, 'stepTime': 0.14375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.228125, 'attempts': 1, 
    'timeIncrement': 0.084375, 'increment': 5, 'stepTime': 0.228125, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.3546875, 'attempts': 1, 
    'timeIncrement': 0.1265625, 'increment': 6, 'stepTime': 0.3546875, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 5, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'CarbonTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:37:50 2023', 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.54453125, 'attempts': 1, 
    'timeIncrement': 0.18984375, 'increment': 7, 'stepTime': 0.54453125, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 5, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 5 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.829296875, 
    'attempts': 1, 'timeIncrement': 0.284765625, 'increment': 8, 
    'stepTime': 0.829296875, 'step': 1, 'jobName': 'BalsaTest', 'severe': 7, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.models['Balsa'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-0.5)
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.170703125, 'increment': 9, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 10, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:38:18 2023', 'jobName': 'BalsaTest'})
mdb.models['Carbon'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-1.0)
mdb.models['Balsa'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-1.0)
# Save by mdulansk on 2023_07_11-14.39.28; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['CarbonTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonTest.odb', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 16536, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'CarbonTest', 'memory': 249.0})
mdb.jobs['CarbonTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 39.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 26 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 64 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 5, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': ' 1U', 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 2, 
    'timeIncrement': 0.00625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.040625, 'attempts': 1, 
    'timeIncrement': 0.009375, 'increment': 3, 'stepTime': 0.040625, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0140625, 'increment': 4, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'CarbonTest', 'severe': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.07578125, 
    'attempts': 1, 'timeIncrement': 0.02109375, 'increment': 5, 
    'stepTime': 0.07578125, 'step': 1, 'jobName': 'CarbonTest', 'severe': 2, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.107421875, 
    'attempts': 1, 'timeIncrement': 0.031640625, 'increment': 6, 
    'stepTime': 0.107421875, 'step': 1, 'jobName': 'CarbonTest', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.1548828125, 
    'attempts': 1, 'timeIncrement': 0.0474609375, 'increment': 7, 
    'stepTime': 0.1548828125, 'step': 1, 'jobName': 'CarbonTest', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.22607421875, 
    'attempts': 1, 'timeIncrement': 0.07119140625, 'increment': 8, 
    'stepTime': 0.22607421875, 'step': 1, 'jobName': 'CarbonTest', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.332861328125, 
    'attempts': 1, 'timeIncrement': 0.106787109375, 'increment': 9, 
    'stepTime': 0.332861328125, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.4930419921875, 
    'attempts': 1, 'timeIncrement': 0.1601806640625, 'increment': 10, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 72 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 203 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 109 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.4930419921875, 
    'attempts': ' 1U', 'timeIncrement': 0.24027099609375, 'increment': 11, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.553109741210937, 
    'attempts': 2, 'timeIncrement': 0.0600677490234375, 'increment': 11, 
    'stepTime': 0.553109741210937, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.643211364746094, 
    'attempts': 1, 'timeIncrement': 0.0901016235351563, 'increment': 12, 
    'stepTime': 0.643211364746094, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.778363800048828, 
    'attempts': 1, 'timeIncrement': 0.135152435302734, 'increment': 13, 
    'stepTime': 0.778363800048828, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 12, 'iterations': 14, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 147 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 272 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 169 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 404 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.778363800048828, 
    'attempts': ' 1U', 'timeIncrement': 0.202728652954102, 'increment': 14, 
    'stepTime': 0.778363800048828, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.778363800048828, 
    'attempts': ' 2U', 'timeIncrement': 0.0506821632385254, 'increment': 14, 
    'stepTime': 0.778363800048828, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 8, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.791034340858459, 
    'attempts': 3, 'timeIncrement': 0.0126705408096313, 'increment': 14, 
    'stepTime': 0.791034340858459, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.810040152072906, 
    'attempts': 1, 'timeIncrement': 0.019005811214447, 'increment': 15, 
    'stepTime': 0.810040152072906, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 176 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 54 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 28 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.810040152072906, 
    'attempts': ' 1U', 'timeIncrement': 0.0285087168216705, 'increment': 16, 
    'stepTime': 0.810040152072906, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.817167331278324, 
    'attempts': 2, 'timeIncrement': 0.00712717920541763, 'increment': 16, 
    'stepTime': 0.817167331278324, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.827858100086451, 
    'attempts': 1, 'timeIncrement': 0.0106907688081265, 'increment': 17, 
    'stepTime': 0.827858100086451, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 6, 'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.838548868894577, 
    'attempts': 1, 'timeIncrement': 0.0106907688081265, 'increment': 18, 
    'stepTime': 0.838548868894577, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.849239637702703, 
    'attempts': 1, 'timeIncrement': 0.0106907688081265, 'increment': 19, 
    'stepTime': 0.849239637702703, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 15 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.865275790914893, 
    'attempts': 1, 'timeIncrement': 0.0160361532121897, 'increment': 20, 
    'stepTime': 0.865275790914893, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 66 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.865275790914893, 
    'attempts': ' 1U', 'timeIncrement': 0.0240542298182845, 'increment': 21, 
    'stepTime': 0.865275790914893, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.871289348369464, 
    'attempts': 2, 'timeIncrement': 0.00601355745457113, 'increment': 21, 
    'stepTime': 0.871289348369464, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.877302905824035, 
    'attempts': 1, 'timeIncrement': 0.00601355745457113, 'increment': 22, 
    'stepTime': 0.877302905824035, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.883316463278606, 
    'attempts': 1, 'timeIncrement': 0.00601355745457113, 'increment': 23, 
    'stepTime': 0.883316463278606, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 21 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 21 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.883316463278606, 
    'attempts': ' 1U', 'timeIncrement': 0.00902033618185669, 'increment': 24, 
    'stepTime': 0.883316463278606, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.885571547324071, 
    'attempts': 2, 'timeIncrement': 0.00225508404546417, 'increment': 24, 
    'stepTime': 0.885571547324071, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.888954173392267, 
    'attempts': 1, 'timeIncrement': 0.00338262606819626, 'increment': 25, 
    'stepTime': 0.888954173392267, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.892336799460463, 
    'attempts': 1, 'timeIncrement': 0.00338262606819626, 'increment': 26, 
    'stepTime': 0.892336799460463, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.895719425528659, 
    'attempts': 1, 'timeIncrement': 0.00338262606819626, 'increment': 27, 
    'stepTime': 0.895719425528659, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 2, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 22 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 30 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.895719425528659, 
    'attempts': ' 1U', 'timeIncrement': 0.00338262606819626, 'increment': 28, 
    'stepTime': 0.895719425528659, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 22 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.896565082045709, 
    'attempts': 2, 'timeIncrement': 0.000845656517049065, 'increment': 28, 
    'stepTime': 0.896565082045709, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.897410738562758, 
    'attempts': 1, 'timeIncrement': 0.000845656517049065, 'increment': 29, 
    'stepTime': 0.897410738562758, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.898679223338331, 
    'attempts': 1, 'timeIncrement': 0.0012684847755736, 'increment': 30, 
    'stepTime': 0.898679223338331, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.900581950501692, 
    'attempts': 1, 'timeIncrement': 0.0019027271633604, 'increment': 31, 
    'stepTime': 0.900581950501692, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.902484677665052, 
    'attempts': 1, 'timeIncrement': 0.0019027271633604, 'increment': 32, 
    'stepTime': 0.902484677665052, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.904387404828412, 
    'attempts': 1, 'timeIncrement': 0.0019027271633604, 'increment': 33, 
    'stepTime': 0.904387404828412, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.907241495573453, 
    'attempts': 1, 'timeIncrement': 0.00285409074504059, 'increment': 34, 
    'stepTime': 0.907241495573453, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.911522631691014, 
    'attempts': 1, 'timeIncrement': 0.00428113611756089, 'increment': 35, 
    'stepTime': 0.911522631691014, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.915803767808575, 
    'attempts': 1, 'timeIncrement': 0.00428113611756089, 'increment': 36, 
    'stepTime': 0.915803767808575, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.915803767808575, 
    'attempts': ' 1U', 'timeIncrement': 0.00428113611756089, 'increment': 37, 
    'stepTime': 0.915803767808575, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 4, 'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.917944335867355, 
    'attempts': 2, 'timeIncrement': 0.00214056805878045, 'increment': 37, 
    'stepTime': 0.917944335867355, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.920084903926136, 
    'attempts': 1, 'timeIncrement': 0.00214056805878045, 'increment': 38, 
    'stepTime': 0.920084903926136, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 39, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.922225471984916, 
    'attempts': 1, 'timeIncrement': 0.00214056805878045, 'increment': 39, 
    'stepTime': 0.922225471984916, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 40, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.925436324073087, 
    'attempts': 1, 'timeIncrement': 0.00321085208817067, 'increment': 40, 
    'stepTime': 0.925436324073087, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 41, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.930252602205343, 
    'attempts': 1, 'timeIncrement': 0.004816278132256, 'increment': 41, 
    'stepTime': 0.930252602205343, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.930252602205343, 
    'attempts': ' 1U', 'timeIncrement': 0.007224417198384, 'increment': 42, 
    'stepTime': 0.930252602205343, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 42, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.932058706504939, 
    'attempts': 2, 'timeIncrement': 0.001806104299596, 'increment': 42, 
    'stepTime': 0.932058706504939, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 43, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.934767862954333, 
    'attempts': 1, 'timeIncrement': 0.002709156449394, 'increment': 43, 
    'stepTime': 0.934767862954333, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.models['Carbon'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-0.5)
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 44, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.938831597628424, 
    'attempts': 1, 'timeIncrement': 0.004063734674091, 'increment': 44, 
    'stepTime': 0.938831597628424, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.models['Balsa'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-0.5)
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 45, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.94492719963956, 
    'attempts': 1, 'timeIncrement': 0.0060956020111365, 'increment': 45, 
    'stepTime': 0.94492719963956, 'step': 1, 'jobName': 'CarbonTest', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonTest'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file CarbonTest.lck. Please confirm that no 
#* other applications are attempting to write to the output database associated 
#* with this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaTest.odb', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 5000, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaTest', 'memory': 273.0})
mdb.jobs['BalsaTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest'].submit(consistencyChecking=OFF)
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF289-ASSEMBLY__PICKEDSURF288), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY__PICKEDSURF291-ASSEMBLY__PICKEDSURF290), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\CarbonTest.odb', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 14900, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'CarbonTest', 'memory': 249.0})
mdb.jobs['CarbonTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 39.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 6, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.575, 'attempts': ' 1U', 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.659375, 'attempts': 2, 
    'timeIncrement': 0.084375, 'increment': 5, 'stepTime': 0.659375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'CarbonTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.7859375, 'attempts': 1, 
    'timeIncrement': 0.1265625, 'increment': 6, 'stepTime': 0.7859375, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'CarbonTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CarbonTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CarbonTest'})
mdb.jobs['CarbonTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:47:06 2023', 'jobName': 'CarbonTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.97578125, 'attempts': 1, 
    'timeIncrement': 0.18984375, 'increment': 7, 'stepTime': 0.97578125, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0242187499999999, 'increment': 8, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(JOB_COMPLETED, {
    'time': 'Tue Jul 11 14:47:13 2023', 'jobName': 'BalsaTest'})
# Save by mdulansk on 2023_07_11-14.51.31; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_11-14.51.32; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_11-14.51.32; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_11-14.51.32; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_11-17.26.14; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.models['Carbon'].parts['Core'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name=
    'Datum csys-2', origin=mdb.models['Carbon'].parts['Core'].InterestingPoint(
    mdb.models['Carbon'].parts['Core'].edges[18], MIDDLE))
mdb.models['Carbon'].rootAssembly.regenerate()
mdb.models['Carbon'].rootAssembly.Set(name='topnode', nodes=
    mdb.models['Carbon'].rootAssembly.instances['topLam-1'].nodes.getSequenceFromMask(
    mask=('[#0 #8 ]', ), ))
mdb.models['Carbon'].historyOutputRequests['H-Output-1'].setValues(rebar=
    EXCLUDE, region=mdb.models['Carbon'].rootAssembly.sets['topnode'], 
    sectionPoints=DEFAULT, variables=('U1', 'U2', 'U3', 'UR1', 'UR2', 'UR3', 
    'RF1', 'RF2', 'RF3', 'RM1', 'RM2', 'RM3', 'RT', 'RM', 'RWM', 'CF1', 'CF2', 
    'CF3', 'CM1', 'CM2', 'CM3'))
# Save by Matt on 2023_07_12-12.47.42; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['CarbonTest'].submit(consistencyChecking=OFF)
# Save by Matt on 2023_07_12-12.57.30; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaTest.odb', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 8908, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 273.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.1, 'increment': 1, 
    'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.1, 'stepTime': 0.1, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 7, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.2, 'increment': 2, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.1, 'stepTime': 0.2, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 2, 'equilibrium': 3})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.35, 'increment': 3, 
    'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.15, 'stepTime': 0.35, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 6, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.575, 'increment': 4, 
    'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.225, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.575, 'increment': 5, 
    'attempts': ' 1U', 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.3375, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 6, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.659375, 'increment': 5, 
    'attempts': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.084375, 'stepTime': 0.659375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 1, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.7859375, 'increment': 6, 
    'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.1265625, 'stepTime': 0.7859375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 4, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.97578125, 
    'increment': 7, 'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.18984375, 'stepTime': 0.97578125, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 1.0, 'increment': 8, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0242187499999999, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 1, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(JOB_COMPLETED, {'jobName': 'BalsaTest', 
    'time': 'Wed Jul 12 13:36:39 2023'})
mdb.models['Balsa'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-0.75)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BalsaFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BalsaFineTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['BalsaFineMesh'].rootAssembly.Set(name='Set-3', nodes=
    mdb.models['BalsaFineMesh'].rootAssembly.instances['TopRig-1'].nodes.getSequenceFromMask(
    mask=('[#100 ]', ), ))
mdb.models['BalsaFineMesh'].rootAssembly.sets.changeKey(fromName='Set-3', 
    toName='TopSupport')
mdb.models['Balsa'].materials['Balsa'].elastic.setValues(table=((507632.082, 
    32633.491, 32633.491, 0.3, 0.3, 0.3, 58015.0951, 58015.0951, 58015.0951), )
    , type=ENGINEERING_CONSTANTS)
mdb.models['Balsa'].materials['EPS Foam'].elastic.setValues(table=((340.0, 
    0.2), ))
# Save by mdulansk on 2023_07_12-17.13.10; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Balsa'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'Step-1', u2=-1.0)
# Save by mdulansk on 2023_07_12-17.13.33; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BalsaFineMesh'].materials['EPS Foam'].elastic.setValues(table=((
    340.0, 0.2), ))
mdb.models['BalsaFineMesh'].materials['Balsa'].elastic.setValues(table=((
    507632.082, 32633.491, 32633.491, 0.3, 0.3, 0.3, 58015.0951, 58015.0951, 
    58015.0951), ), type=ENGINEERING_CONSTANTS)
mdb.jobs['BalsaFineTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaFineTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Anisotropic material properties without a local orientation system have been defined for 960 elements. Anisotropic material properties must be defined in a local orientation system. The elements are identified in element set ErrElemAnisotropicMaterial.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaFineTest.odb', 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  BalsaFineTest.dat file for possible error messages if the file exists.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  BalsaFineTest.dat file for possible error messages if the file exists.', 
    'jobName': 'BalsaFineTest'})
mdb.models['BalsaFineMesh'].parts['Core'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name=
    'Datum csys-1', origin=
    mdb.models['BalsaFineMesh'].parts['Core'].vertices[15])
del mdb.models['BalsaFineMesh'].parts['Core'].features['Datum csys-1']
mdb.models['BalsaFineMesh'].parts['Core'].DatumCsysByThreePoints(coordSysType=
    CARTESIAN, name='Datum csys-1', origin=
    mdb.models['BalsaFineMesh'].parts['Core'].vertices[12], point1=
    mdb.models['BalsaFineMesh'].parts['Core'].vertices[11], point2=
    mdb.models['BalsaFineMesh'].parts['Core'].vertices[13])
mdb.models['BalsaFineMesh'].parts['Core'].MaterialOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['BalsaFineMesh'].parts['Core'].datums[12], orientationType=
    SYSTEM, region=Region(
    cells=mdb.models['BalsaFineMesh'].parts['Core'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Balsa'].parts['Core'].DatumCsysByThreePoints(coordSysType=CARTESIAN
    , name='Datum csys-1', origin=
    mdb.models['Balsa'].parts['Core'].vertices[12], point1=
    mdb.models['Balsa'].parts['Core'].vertices[11], point2=
    mdb.models['Balsa'].parts['Core'].vertices[13])
mdb.models['Balsa'].parts['Core'].MaterialOrientation(additionalRotationField=
    '', additionalRotationType=ROTATION_NONE, angle=0.0, axis=AXIS_3, 
    fieldName='', localCsys=mdb.models['Balsa'].parts['Core'].datums[10], 
    orientationType=SYSTEM, region=Region(
    cells=mdb.models['Balsa'].parts['Core'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), stackDirection=STACK_3)
mdb.models['Balsa'].rootAssembly.regenerate()
del mdb.jobs['BalsaFineTest']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BalsaFineMesh', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='BalsaFineTest', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['Balsa'].parts['Core'].regenerate()
mdb.models['Balsa'].parts['Core'].regenerate()
mdb.models['BalsaFineMesh'].parts['Core'].regenerate()
mdb.models['BalsaFineMesh'].parts['Core'].regenerate()
# Save by mdulansk on 2023_07_12-17.19.03; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['BalsaFineMesh'].parts['Core'].regenerate()
mdb.models['BalsaFineMesh'].parts['Core'].regenerate()
mdb.models['BalsaFineMesh'].parts['Core'].regenerate()
mdb.models['BalsaFineMesh'].rootAssembly.regenerate()
mdb.models['BalsaFineMesh'].rootAssembly.regenerate()
mdb.jobs['BalsaFineTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaFineTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaFineTest.odb', 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 18320, 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaFineTest', 'memory': 2203.0})
mdb.jobs['BalsaFineTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 221.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaTest.odb', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 12032, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaTest', 'memory': 273.0})
mdb.jobs['BalsaTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 45 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 10, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': 2, 
    'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 34 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 32 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.025, 'attempts': ' 1U', 
    'timeIncrement': 0.025, 'increment': 2, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.03125, 'attempts': 2, 
    'timeIncrement': 0.00625, 'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.040625, 'attempts': 1, 
    'timeIncrement': 0.009375, 'increment': 3, 'stepTime': 0.040625, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 4, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.0546875, 'attempts': 1, 
    'timeIncrement': 0.0140625, 'increment': 4, 'stepTime': 0.0546875, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.07578125, 'attempts': 1, 
    'timeIncrement': 0.02109375, 'increment': 5, 'stepTime': 0.07578125, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.107421875, 
    'attempts': 1, 'timeIncrement': 0.031640625, 'increment': 6, 
    'stepTime': 0.107421875, 'step': 1, 'jobName': 'BalsaTest', 'severe': 2, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 3, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.1548828125, 
    'attempts': 1, 'timeIncrement': 0.0474609375, 'increment': 7, 
    'stepTime': 0.1548828125, 'step': 1, 'jobName': 'BalsaTest', 'severe': 6, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.22607421875, 
    'attempts': 1, 'timeIncrement': 0.07119140625, 'increment': 8, 
    'stepTime': 0.22607421875, 'step': 1, 'jobName': 'BalsaTest', 'severe': 6, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
# Save by mdulansk on 2023_07_12-17.22.51; build 2022 2021_09_15-10.57.30 176069
# Save by mdulansk on 2023_07_12-17.22.51; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.332861328125, 
    'attempts': 1, 'timeIncrement': 0.106787109375, 'increment': 9, 
    'stepTime': 0.332861328125, 'step': 1, 'jobName': 'BalsaTest', 'severe': 9, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.4930419921875, 
    'attempts': 1, 'timeIncrement': 0.1601806640625, 'increment': 10, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 10, 'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 26 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 304 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1553 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.4930419921875, 
    'attempts': ' 1U', 'timeIncrement': 0.24027099609375, 'increment': 11, 
    'stepTime': 0.4930419921875, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.553109741210937, 
    'attempts': 2, 'timeIncrement': 0.0600677490234375, 'increment': 11, 
    'stepTime': 0.553109741210937, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 5, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.643211364746094, 
    'attempts': 1, 'timeIncrement': 0.0901016235351563, 'increment': 12, 
    'stepTime': 0.643211364746094, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.643211364746094, 
    'attempts': ' 1U', 'timeIncrement': 0.135152435302734, 'increment': 13, 
    'stepTime': 0.643211364746094, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.676999473571777, 
    'attempts': 2, 'timeIncrement': 0.0337881088256836, 'increment': 13, 
    'stepTime': 0.676999473571777, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 6, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.727681636810303, 
    'attempts': 1, 'timeIncrement': 0.0506821632385254, 'increment': 14, 
    'stepTime': 0.727681636810303, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 9, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 10 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.803704881668091, 
    'attempts': 1, 'timeIncrement': 0.0760232448577881, 'increment': 15, 
    'stepTime': 0.803704881668091, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 8, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.917739748954773, 
    'attempts': 1, 'timeIncrement': 0.114034867286682, 'increment': 16, 
    'stepTime': 0.917739748954773, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 13, 'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.082260251045227, 'increment': 17, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 11, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(JOB_COMPLETED, {
    'time': 'Wed Jul 12 17:24:51 2023', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 0.45, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 4, 'stepTime': 0.45, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 7, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 0.675, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 5, 'stepTime': 0.675, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 1.0125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 6, 'stepTime': 1.0125, 'step': 1, 
    'jobName': 'BalsaFineTest', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 1.51875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 7, 
    'stepTime': 1.51875, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 7, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 2.278125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 8, 
    'stepTime': 2.278125, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 7, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 3.278125, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 9, 'stepTime': 3.278125, 
    'step': 1, 'jobName': 'BalsaFineTest', 'severe': 12, 'iterations': 13, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 19 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 3.278125, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 10, 
    'stepTime': 3.278125, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 3.528125, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 10, 
    'stepTime': 3.528125, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 9, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 3.903125, 
    'attempts': 1, 'timeIncrement': 0.375, 'increment': 11, 
    'stepTime': 3.903125, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 27 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 23 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 23 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 23 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 3.903125, 
    'attempts': ' 1U', 'timeIncrement': 0.5625, 'increment': 12, 
    'stepTime': 3.903125, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 4.04375, 
    'attempts': 2, 'timeIncrement': 0.140625, 'increment': 12, 
    'stepTime': 4.04375, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 4.2546875, 
    'attempts': 1, 'timeIncrement': 0.2109375, 'increment': 13, 
    'stepTime': 4.2546875, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 8, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 17 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.models['Balsa'].fieldOutputRequests['F-Output-1'].setValues(variables=('S', 
    'MISES', 'E', 'VE', 'U', 'UT', 'UR', 'RF'))
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 4.57109375, 
    'attempts': 1, 'timeIncrement': 0.31640625, 'increment': 14, 
    'stepTime': 4.57109375, 'step': 1, 'jobName': 'BalsaFineTest', 'severe': 8, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 25 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.045703125, 
    'attempts': 1, 'timeIncrement': 0.474609375, 'increment': 15, 
    'stepTime': 5.045703125, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 10, 'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 61 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 50 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 52 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 51 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.045703125, 
    'attempts': ' 1U', 'timeIncrement': 0.7119140625, 'increment': 16, 
    'stepTime': 5.045703125, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 40 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.045703125, 
    'attempts': ' 2U', 'timeIncrement': 0.177978515625, 'increment': 16, 
    'stepTime': 5.045703125, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 37 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 38 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 38 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.09019775390625, 
    'attempts': 3, 'timeIncrement': 0.04449462890625, 'increment': 16, 
    'stepTime': 5.09019775390625, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 39 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.models['Balsa'].materials['EPS Foam'].elastic.setValues(table=((730.0, 
    0.2), ))
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.15693969726563, 
    'attempts': 1, 'timeIncrement': 0.066741943359375, 'increment': 17, 
    'stepTime': 5.15693969726563, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 8, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE ARE MULTIPLE RIGID REFERENCE NODES ASSOCIATED WITH SURFACE ASSEMBLY_M_SURF-3. ONLY THE FIRST ONE WILL BE USED.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-5-ASSEMBLY_S_SURF-5), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_M_SURF-7-ASSEMBLY_S_SURF-7), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE REQUEST FOR MISES OUTPUT WILL BE REPLACED BY A REQUEST FOR S OUTPUT', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D4', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST VE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE R3D3', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\BalsaTest.odb', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'its-sme143-41', 'handle': 16776, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'BalsaTest', 'memory': 273.0})
mdb.jobs['BalsaTest']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32378.0, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 26 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 8, 'iterations': 11, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 16 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 208 negative eigenvalues.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3822 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3822 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3822 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3821 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3821 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3821 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4010 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4010 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4010 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4009 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4009 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4009 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3830 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3830 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3830 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4014 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4014 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4014 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3826 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3826 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3826 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4013 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4013 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4013 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3825 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3825 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3825 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4029 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4029 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4029 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4030 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4030 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4030 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4025 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4025 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4025 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4026 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4026 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4026 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3654 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3654 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3654 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3650 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3650 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3650 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3649 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3649 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3649 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3842 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3842 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3842 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3837 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3837 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3837 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3838 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3838 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3838 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3841 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3841 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3841 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4022 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4022 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4022 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3829 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3829 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3829 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3833 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3833 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3833 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3834 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3834 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3834 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4017 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4017 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4017 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4018 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4018 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4018 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4021 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4021 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.4021 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1620 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1620 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1620 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1624 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1624 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1624 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1628 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1628 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1628 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1619 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1619 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1619 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1627 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1627 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1627 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1623 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1623 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1623 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1640 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1640 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1640 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3278 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3278 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3278 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1636 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1636 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1636 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3274 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3274 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3274 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1635 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1635 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1635 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3273 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3273 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3273 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1632 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1632 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1632 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1631 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1631 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.1631 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3446 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaFineTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(STATUS, {'totalTime': 5.20699615478516, 
    'attempts': 1, 'timeIncrement': 0.0500564575195312, 'increment': 18, 
    'stepTime': 5.20699615478516, 'step': 1, 'jobName': 'BalsaFineTest', 
    'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3446 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3446 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3450 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3450 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3450 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3454 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3454 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3454 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3262 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3262 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3262 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3258 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3258 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3258 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3266 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3266 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3266 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3270 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3270 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3270 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3637 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3637 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3637 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3257 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3257 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3257 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3261 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3261 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3261 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3265 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3265 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3265 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3269 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3269 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3269 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3445 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3445 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3445 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3449 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3449 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3449 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3453 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3453 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3453 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3457 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3457 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3457 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3458 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3458 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3458 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3461 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3461 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3461 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3462 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3462 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3462 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3466 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3466 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3466 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3633 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3633 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3633 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3634 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3634 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3634 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3638 D.O.F. 1.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3638 D.O.F. 2.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node CORE-1.3638 D.O.F. 3.', 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.2, 'attempts': ' 1U', 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.2375, 'attempts': 2, 
    'timeIncrement': 0.0375, 'increment': 3, 'stepTime': 0.2375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 41 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.29375, 'attempts': 1, 
    'timeIncrement': 0.05625, 'increment': 4, 'stepTime': 0.29375, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.378125, 'attempts': 1, 
    'timeIncrement': 0.084375, 'increment': 5, 'stepTime': 0.378125, 'step': 1, 
    'jobName': 'BalsaTest', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.5046875, 'attempts': 1, 
    'timeIncrement': 0.1265625, 'increment': 6, 'stepTime': 0.5046875, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 9, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.5046875, 
    'attempts': ' 1U', 'timeIncrement': 0.18984375, 'increment': 7, 
    'stepTime': 0.5046875, 'step': 1, 'jobName': 'BalsaTest', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaFineTest']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 42 negative eigenvalues.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.5521484375, 
    'attempts': 2, 'timeIncrement': 0.0474609375, 'increment': 7, 
    'stepTime': 0.5521484375, 'step': 1, 'jobName': 'BalsaTest', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaFineTest']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaFineTest']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'BalsaFineTest'})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.62333984375, 
    'attempts': 1, 'timeIncrement': 0.07119140625, 'increment': 8, 
    'stepTime': 0.62333984375, 'step': 1, 'jobName': 'BalsaTest', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.730126953125, 
    'attempts': 1, 'timeIncrement': 0.106787109375, 'increment': 9, 
    'stepTime': 0.730126953125, 'step': 1, 'jobName': 'BalsaTest', 'severe': 8, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.730126953125, 
    'attempts': ' 1U', 'timeIncrement': 0.1601806640625, 'increment': 10, 
    'stepTime': 0.730126953125, 'step': 1, 'jobName': 'BalsaTest', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.770172119140625, 
    'attempts': 2, 'timeIncrement': 0.040045166015625, 'increment': 10, 
    'stepTime': 0.770172119140625, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.830239868164063, 
    'attempts': 1, 'timeIncrement': 0.0600677490234375, 'increment': 11, 
    'stepTime': 0.830239868164063, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 8, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 0.920341491699219, 
    'attempts': 1, 'timeIncrement': 0.0901016235351563, 'increment': 12, 
    'stepTime': 0.920341491699219, 'step': 1, 'jobName': 'BalsaTest', 
    'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0796585083007811, 'increment': 13, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'BalsaTest', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['BalsaTest']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'BalsaTest'})
mdb.jobs['BalsaTest']._Message(JOB_COMPLETED, {
    'time': 'Wed Jul 12 17:56:05 2023', 'jobName': 'BalsaTest'})
# Save by mdulansk on 2023_07_12-17.59.36; build 2022 2021_09_15-10.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['BalsaFineTest']
mdb.jobs['BalsaTest'].submit(consistencyChecking=OFF)
mdb.Model(name='BalsaFlatterSupport', objectToCopy=mdb.models['Balsa'])
mdb.models['BalsaFlatterSupport'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].features['Solid extrude-1'].sketch)
mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['BalsaFlatterSupport'].sketches['__edit__'], upToFeature=
    mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].features['Solid extrude-1'])
mdb.models['BalsaFlatterSupport'].sketches['__edit__'].delete(objectList=(
    mdb.models['BalsaFlatterSupport'].sketches['__edit__'].geometry[5], ))
mdb.models['BalsaFlatterSupport'].sketches['__edit__'].Arc3Points(point1=(-1.0, 
    0.0), point2=(1.0, 0.0), point3=(0.0, 0.25))
mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['BalsaFlatterSupport'].sketches['__edit__'])
del mdb.models['BalsaFlatterSupport'].sketches['__edit__']
mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].regenerate()
mdb.models['BalsaFlatterSupport'].parts['BottomSupport'].generateMesh()
mdb.models['BalsaFlatterSupport'].rootAssembly.regenerate()
mdb.models['BalsaFlatterSupport'].rootAssembly.translate(instanceList=(
    'BottomSupport-2', ), vector=(-0.013653, 0.75, -0.013653))
mdb.models['BalsaFlatterSupport'].rootAssembly.translate(instanceList=(
    'BottomSupport-1', ), vector=(-0.013653, 0.75, -0.013653))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='BalsaFlatterSupport', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='Job-3', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Job-3', toName='BalsaFlatSupportTest')
mdb.jobs['BalsaFlatSupportTest'].submit(consistencyChecking=OFF)
# Save by Matt on 2023_07_13-11.55.44; build 2022 2021_09_15-10.57.30 176069
# Save by Matt on 2023_07_13-11.55.45; build 2022 2021_09_15-10.57.30 176069
